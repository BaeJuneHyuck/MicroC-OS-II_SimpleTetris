###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         23/Dec/2019  21:46:50
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_time.c
#    Command line =
#        -f C:\Users\hn829\AppData\Local\Temp\EW9601.tmp
#        (C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_time.c
#        -lCN
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\os_time.lst
#    Object file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\os_time.o
#
###############################################################################

C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_time.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                             TIME MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2007, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_TIME.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.86
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          #include <ucos_ii.h>
     26          #endif
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                DELAY TASK 'n' TICKS   (n from 0 to 65535)
     31          *
     32          * Description: This function is called to delay execution of the currently running task until the
     33          *              specified number of system ticks expires.  This, of course, directly equates to delaying
     34          *              the current task for some time to expire.  No delay will result If the specified delay is
     35          *              0.  If the specified delay is greater than 0 then, a context switch will result.
     36          *
     37          * Arguments  : ticks     is the time delay that the task will be suspended in number of clock 'ticks'.
     38          *                        Note that by specifying 0, the task will not be delayed.
     39          *
     40          * Returns    : none
     41          *********************************************************************************************************
     42          */
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void  OSTimeDly (INT16U ticks)
     45          {
   \                     OSTimeDly: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
     46              INT8U      y;
     47          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
     48              OS_CPU_SR  cpu_sr = 0;
     49          #endif
     50          
     51          
     52          
     53              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   \        0x2   0x....             LDR.N    R1,??DataTable4
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x7808             LDRB     R0,[R1, #+0]
   \        0x8   0xB9D0             CBNZ.N   R0,??OSTimeDly_0
     54                  return;
     55              }
     56              if (ticks > 0) {                             /* 0 means no delay!                                  */
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0xD018             BEQ.N    ??OSTimeDly_0
     57                  OS_ENTER_CRITICAL();
   \        0xE   0x....'....        BL       OS_CPU_SR_Save
     58                  y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   \       0x12   0x....             LDR.N    R1,??DataTable4_1
     59                  OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   \       0x14   0x....             LDR.N    R3,??DataTable4_2
   \       0x16   0x680A             LDR      R2,[R1, #+0]
   \       0x18   0x322E             ADDS     R2,R2,#+46
   \       0x1A   0x7991             LDRB     R1,[R2, #+6]
   \       0x1C   0x79D5             LDRB     R5,[R2, #+7]
   \       0x1E   0x5C5E             LDRB     R6,[R3, R1]
   \       0x20   0xEA36 0x0505      BICS     R5,R6,R5
   \       0x24   0x545D             STRB     R5,[R3, R1]
     60                  if (OSRdyTbl[y] == 0) {
   \       0x26   0xD104             BNE.N    ??OSTimeDly_1
     61                      OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   \       0x28   0x....             LDR.N    R3,??DataTable4_3
   \       0x2A   0x7A11             LDRB     R1,[R2, #+8]
   \       0x2C   0x781D             LDRB     R5,[R3, #+0]
   \       0x2E   0x438D             BICS     R5,R5,R1
   \       0x30   0x701D             STRB     R5,[R3, #+0]
     62                  }
     63                  OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   \                     ??OSTimeDly_1: (+1)
   \       0x32   0x8014             STRH     R4,[R2, #+0]
     64                  OS_EXIT_CRITICAL();
   \       0x34   0x....'....        BL       OS_CPU_SR_Restore
     65                  OS_Sched();                              /* Find next task to run!                             */
   \       0x38   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x3C   0x....'....        B.W      OS_Sched
     66              }
     67          }
   \                     ??OSTimeDly_0: (+1)
   \       0x40   0xBD70             POP      {R4-R6,PC}       ;; return
     68          /*$PAGE*/
     69          /*
     70          *********************************************************************************************************
     71          *                                     DELAY TASK FOR SPECIFIED TIME
     72          *
     73          * Description: This function is called to delay execution of the currently running task until some time
     74          *              expires.  This call allows you to specify the delay time in HOURS, MINUTES, SECONDS and
     75          *              MILLISECONDS instead of ticks.
     76          *
     77          * Arguments  : hours     specifies the number of hours that the task will be delayed (max. is 255)
     78          *              minutes   specifies the number of minutes (max. 59)
     79          *              seconds   specifies the number of seconds (max. 59)
     80          *              milli     specifies the number of milliseconds (max. 999)
     81          *
     82          * Returns    : OS_ERR_NONE
     83          *              OS_ERR_TIME_INVALID_MINUTES
     84          *              OS_ERR_TIME_INVALID_SECONDS
     85          *              OS_ERR_TIME_INVALID_MS
     86          *              OS_ERR_TIME_ZERO_DLY
     87          *              OS_ERR_TIME_DLY_ISR
     88          *
     89          * Note(s)    : The resolution on the milliseconds depends on the tick rate.  For example, you can't do
     90          *              a 10 mS delay if the ticker interrupts every 100 mS.  In this case, the delay would be
     91          *              set to 0.  The actual delay is rounded to the nearest tick.
     92          *********************************************************************************************************
     93          */
     94          
     95          #if OS_TIME_DLY_HMSM_EN > 0

   \                                 In section .text, align 2, keep-with-next
     96          INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
     97          {
   \                     OSTimeDlyHMSM: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
     98              INT32U ticks;
     99              INT16U loops;
    100          
    101          
    102              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   \        0x2   0x....             LDR.N    R5,??DataTable4
   \        0x4   0x782C             LDRB     R4,[R5, #+0]
   \        0x6   0xB10C             CBZ.N    R4,??OSTimeDlyHMSM_0
    103                  return (OS_ERR_TIME_DLY_ISR);
   \        0x8   0x2055             MOVS     R0,#+85
   \        0xA   0xBD70             POP      {R4-R6,PC}
    104              }
    105          #if OS_ARG_CHK_EN > 0
    106              if (hours == 0) {
    107                  if (minutes == 0) {
    108                      if (seconds == 0) {
    109                          if (ms == 0) {
    110                              return (OS_ERR_TIME_ZERO_DLY);
    111                          }
    112                      }
    113                  }
    114              }
    115              if (minutes > 59) {
    116                  return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    117              }
    118              if (seconds > 59) {
    119                  return (OS_ERR_TIME_INVALID_SECONDS);
    120              }
    121              if (ms > 999) {
    122                  return (OS_ERR_TIME_INVALID_MS);
    123              }
    124          #endif
    125                                                           /* Compute the total number of clock ticks required.. */
    126                                                           /* .. (rounded to the nearest tick)                   */
    127              ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    128                    + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   \                     ??OSTimeDlyHMSM_0: (+1)
   \        0xC   0x243C             MOVS     R4,#+60
   \        0xE   0xF44F 0x757A      MOV      R5,#+1000
   \       0x12   0xF44F 0x6661      MOV      R6,#+3600
   \       0x16   0x4361             MULS     R1,R4,R1
   \       0x18   0xFB06 0x1000      MLA      R0,R6,R0,R1
   \       0x1C   0x436B             MULS     R3,R5,R3
   \       0x1E   0x4629             MOV      R1,R5
   \       0x20   0x1810             ADDS     R0,R2,R0
   \       0x22   0xFBB3 0xF1F1      UDIV     R1,R3,R1
   \       0x26   0xFB05 0x1000      MLA      R0,R5,R0,R1
    129              loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   \       0x2A   0x0C04             LSRS     R4,R0,#+16
    130              ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    131              OSTimeDly((INT16U)ticks);
   \       0x2C   0xB280             UXTH     R0,R0
   \       0x2E   0x....'....        BL       OSTimeDly
   \       0x32   0xE008             B.N      ??OSTimeDlyHMSM_1
    132              while (loops > 0) {
    133                  OSTimeDly((INT16U)32768u);
   \                     ??OSTimeDlyHMSM_2: (+1)
   \       0x34   0xF44F 0x4000      MOV      R0,#+32768
   \       0x38   0x....'....        BL       OSTimeDly
    134                  OSTimeDly((INT16U)32768u);
   \       0x3C   0xF44F 0x4000      MOV      R0,#+32768
   \       0x40   0x....'....        BL       OSTimeDly
    135                  loops--;
   \       0x44   0x1E64             SUBS     R4,R4,#+1
    136              }
   \                     ??OSTimeDlyHMSM_1: (+1)
   \       0x46   0xB2A0             UXTH     R0,R4
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD1F3             BNE.N    ??OSTimeDlyHMSM_2
   \       0x4C   0xBD70             POP      {R4-R6,PC}       ;; return
    137              return (OS_ERR_NONE);
    138          }
    139          #endif
    140          /*$PAGE*/
    141          /*
    142          *********************************************************************************************************
    143          *                                         RESUME A DELAYED TASK
    144          *
    145          * Description: This function is used resume a task that has been delayed through a call to either
    146          *              OSTimeDly() or OSTimeDlyHMSM().  Note that you can call this function to resume a
    147          *              task that is waiting for an event with timeout.  This would make the task look
    148          *              like a timeout occurred.
    149          *
    150          *              Also, you cannot resume a task that has called OSTimeDlyHMSM() with a combined time that
    151          *              exceeds 65535 clock ticks.  In other words, if the clock tick runs at 100 Hz then, you will
    152          *              not be able to resume a delayed task that called OSTimeDlyHMSM(0, 10, 55, 350) or higher:
    153          *
    154          *                  (10 Minutes * 60 + 55 Seconds + 0.35) * 100 ticks/second.
    155          *
    156          * Arguments  : prio                      specifies the priority of the task to resume
    157          *
    158          * Returns    : OS_ERR_NONE               Task has been resumed
    159          *              OS_ERR_PRIO_INVALID       if the priority you specify is higher that the maximum allowed
    160          *                                        (i.e. >= OS_LOWEST_PRIO)
    161          *              OS_ERR_TIME_NOT_DLY       Task is not waiting for time to expire
    162          *              OS_ERR_TASK_NOT_EXIST     The desired task has not been created or has been assigned to a Mutex.
    163          *********************************************************************************************************
    164          */
    165          
    166          #if OS_TIME_DLY_RESUME_EN > 0

   \                                 In section .text, align 2, keep-with-next
    167          INT8U  OSTimeDlyResume (INT8U prio)
    168          {
   \                     OSTimeDlyResume: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    169              OS_TCB    *ptcb;
    170          #if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    171              OS_CPU_SR  cpu_sr = 0;
    172          #endif
    173          
    174          
    175          
    176              if (prio >= OS_LOWEST_PRIO) {
   \        0x4   0x2C1F             CMP      R4,#+31
   \        0x6   0xDB01             BLT.N    ??OSTimeDlyResume_0
    177                  return (OS_ERR_PRIO_INVALID);
   \        0x8   0x202A             MOVS     R0,#+42
   \        0xA   0xBD32             POP      {R1,R4,R5,PC}
    178              }
    179              OS_ENTER_CRITICAL();
   \                     ??OSTimeDlyResume_0: (+1)
   \        0xC   0x....'....        BL       OS_CPU_SR_Save
    180              ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   \       0x10   0x....             LDR.N    R1,??DataTable4_4
   \       0x12   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
    181              if (ptcb == (OS_TCB *)0) {
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0xBF18             IT       NE 
   \       0x1A   0x2901             CMPNE    R1,#+1
    182                  OS_EXIT_CRITICAL();
    183                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    184              }
    185              if (ptcb == OS_TCB_RESERVED) {
   \       0x1C   0xD103             BNE.N    ??OSTimeDlyResume_1
    186                  OS_EXIT_CRITICAL();
   \       0x1E   0x....'....        BL       OS_CPU_SR_Restore
    187                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   \       0x22   0x2043             MOVS     R0,#+67
   \       0x24   0xBD32             POP      {R1,R4,R5,PC}
    188              }
    189              if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   \                     ??OSTimeDlyResume_1: (+1)
   \       0x26   0xF101 0x022E      ADD      R2,R1,#+46
   \       0x2A   0x8811             LDRH     R1,[R2, #+0]
   \       0x2C   0xB919             CBNZ.N   R1,??OSTimeDlyResume_2
    190                  OS_EXIT_CRITICAL();
   \       0x2E   0x....'....        BL       OS_CPU_SR_Restore
    191                  return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   \       0x32   0x2050             MOVS     R0,#+80
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}
    192              }
    193          
    194              ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   \                     ??OSTimeDlyResume_2: (+1)
   \       0x36   0x2100             MOVS     R1,#+0
   \       0x38   0x8011             STRH     R1,[R2, #+0]
    195              if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   \       0x3A   0x7891             LDRB     R1,[R2, #+2]
   \       0x3C   0xF011 0x0F37      TST      R1,#0x37
   \       0x40   0xBF1D             ITTTE    NE 
   \       0x42   0xF001 0x01C8      ANDNE    R1,R1,#0xC8
   \       0x46   0x7091             STRBNE   R1,[R2, #+2]
   \       0x48   0x2101             MOVNE    R1,#+1
   \       0x4A   0x2100             MOVEQ    R1,#+0
    196                  ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    197                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    198              } else {
    199                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   \       0x4C   0x70D1             STRB     R1,[R2, #+3]
    200              }
    201              if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   \       0x4E   0x7891             LDRB     R1,[R2, #+2]
   \       0x50   0x070B             LSLS     R3,R1,#+28
   \       0x52   0xD40F             BMI.N    ??OSTimeDlyResume_3
    202                  OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   \       0x54   0x....             LDR.N    R3,??DataTable4_3
   \       0x56   0x7A11             LDRB     R1,[R2, #+8]
   \       0x58   0x781C             LDRB     R4,[R3, #+0]
   \       0x5A   0x430C             ORRS     R4,R1,R4
   \       0x5C   0x701C             STRB     R4,[R3, #+0]
    203                  OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   \       0x5E   0x7993             LDRB     R3,[R2, #+6]
   \       0x60   0x....             LDR.N    R4,??DataTable4_2
   \       0x62   0x79D1             LDRB     R1,[R2, #+7]
   \       0x64   0x5CE5             LDRB     R5,[R4, R3]
   \       0x66   0x430D             ORRS     R5,R1,R5
   \       0x68   0x54E5             STRB     R5,[R4, R3]
    204                  OS_EXIT_CRITICAL();
   \       0x6A   0x....'....        BL       OS_CPU_SR_Restore
    205                  OS_Sched();                                            /* See if this is new highest priority  */
   \       0x6E   0x....'....        BL       OS_Sched
   \       0x72   0xE001             B.N      ??OSTimeDlyResume_4
    206              } else {
    207                  OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
   \                     ??OSTimeDlyResume_3: (+1)
   \       0x74   0x....'....        BL       OS_CPU_SR_Restore
    208              }
    209              return (OS_ERR_NONE);
   \                     ??OSTimeDlyResume_4: (+1)
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    210          }
    211          #endif
    212          /*$PAGE*/
    213          /*
    214          *********************************************************************************************************
    215          *                                         GET CURRENT SYSTEM TIME
    216          *
    217          * Description: This function is used by your application to obtain the current value of the 32-bit
    218          *              counter which keeps track of the number of clock ticks.
    219          *
    220          * Arguments  : none
    221          *
    222          * Returns    : The current value of OSTime
    223          *********************************************************************************************************
    224          */
    225          
    226          #if OS_TIME_GET_SET_EN > 0

   \                                 In section .text, align 2, keep-with-next
    227          INT32U  OSTimeGet (void)
    228          {
   \                     OSTimeGet: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    229              INT32U     ticks;
    230          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    231              OS_CPU_SR  cpu_sr = 0;
    232          #endif
    233          
    234          
    235          
    236              OS_ENTER_CRITICAL();
   \        0x2   0x....'....        BL       OS_CPU_SR_Save
    237              ticks = OSTime;
   \        0x6   0x....             LDR.N    R1,??DataTable4_5
   \        0x8   0x680C             LDR      R4,[R1, #+0]
    238              OS_EXIT_CRITICAL();
   \        0xA   0x....'....        BL       OS_CPU_SR_Restore
    239              return (ticks);
   \        0xE   0x4620             MOV      R0,R4
   \       0x10   0xBD10             POP      {R4,PC}          ;; return
    240          }
    241          #endif
    242          
    243          /*
    244          *********************************************************************************************************
    245          *                                            SET SYSTEM CLOCK
    246          *
    247          * Description: This function sets the 32-bit counter which keeps track of the number of clock ticks.
    248          *
    249          * Arguments  : ticks      specifies the new value that OSTime needs to take.
    250          *
    251          * Returns    : none
    252          *********************************************************************************************************
    253          */
    254          
    255          #if OS_TIME_GET_SET_EN > 0

   \                                 In section .text, align 2, keep-with-next
    256          void  OSTimeSet (INT32U ticks)
    257          {
   \                     OSTimeSet: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    258          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    259              OS_CPU_SR  cpu_sr = 0;
    260          #endif
    261          
    262          
    263          
    264              OS_ENTER_CRITICAL();
   \        0x4   0x....'....        BL       OS_CPU_SR_Save
    265              OSTime = ticks;
   \        0x8   0x....             LDR.N    R1,??DataTable4_5
   \        0xA   0x600C             STR      R4,[R1, #+0]
    266              OS_EXIT_CRITICAL();
   \        0xC   0xE8BD 0x4010      POP      {R4,LR}
   \       0x10   0x....'....        B.W      OS_CPU_SR_Restore
    267          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x....'....        DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     OSTCBCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     OSRdyTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     OSRdyGrp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     OSTCBPrioTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     OSTime
    268          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   OSTimeDly
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
         0   -> OS_Sched
      16   OSTimeDlyHMSM
        16   -> OSTimeDly
      16   OSTimeDlyResume
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
        16   -> OS_Sched
       8   OSTimeGet
         8   -> OS_CPU_SR_Restore
         8   -> OS_CPU_SR_Save
       8   OSTimeSet
         0   -> OS_CPU_SR_Restore
         8   -> OS_CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      66  OSTimeDly
      78  OSTimeDlyHMSM
     124  OSTimeDlyResume
      18  OSTimeGet
      20  OSTimeSet

 
 330 bytes in section .text
 
 330 bytes of CODE memory

Errors: none
Warnings: none
