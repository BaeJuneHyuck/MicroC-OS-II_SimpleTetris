###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         23/Dec/2019  21:46:50
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\stm32f10x_HC-SR04.c
#    Command line =
#        -f C:\Users\hn829\AppData\Local\Temp\EW97CB.tmp
#        (C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\stm32f10x_HC-SR04.c
#        -lCN
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\stm32f10x_HC-SR04.lst
#    Object file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\stm32f10x_HC-SR04.o
#
###############################################################################

C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\stm32f10x_HC-SR04.c
      1          #include <stm32f10x_HC-SR04.h>
      2          
      3          extern void EnableHCSR04PeriphClock();
      4          
      5          static void initMeasureTimer() {
      6          	RCC_ClocksTypeDef RCC_ClocksStatus;
      7          	RCC_GetClocksFreq(&RCC_ClocksStatus);
      8          	CPU_INT16U prescaler = RCC_ClocksStatus.SYSCLK_Frequency / 1000000 - 1; //1 tick = 1us (1 tick = 0.165mm resolution)
      9          
     10          	TIM_DeInit(US_TIMER);
     11          	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
     12          	TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
     13          	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
     14          	TIM_TimeBaseInitStruct.TIM_Period = 0xFFFF;
     15          	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
     16          	TIM_TimeBaseInit(US_TIMER, &TIM_TimeBaseInitStruct);
     17          
     18          	TIM_OCInitTypeDef TIM_OCInitStruct;
     19          	TIM_OCStructInit(&TIM_OCInitStruct);
     20          	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
     21          	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
     22          	TIM_OCInitStruct.TIM_Pulse = 15; //us
     23          	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
     24          	TIM_OC3Init(US_TIMER, &TIM_OCInitStruct);
     25          
     26          	TIM_ICInitTypeDef TIM_ICInitStruct;
     27          	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
     28          	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
     29          	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
     30          	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
     31          	TIM_ICInitStruct.TIM_ICFilter = 0;
     32          
     33          	TIM_PWMIConfig(US_TIMER, &TIM_ICInitStruct);
     34          	TIM_SelectInputTrigger(US_TIMER, US_TIMER_TRIG_SOURCE);
     35          	TIM_SelectMasterSlaveMode(US_TIMER, TIM_MasterSlaveMode_Enable);
     36          
     37          	TIM_CtrlPWMOutputs(US_TIMER, ENABLE);
     38          
     39          	TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
     40          }
     41          
     42          static void initPins() {
     43          	GPIO_InitTypeDef GPIO_InitStructure;
     44          	GPIO_InitStructure.GPIO_Pin = US_TRIG_PIN;
     45          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     46          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     47          	GPIO_Init(US_TRIG_PORT, &GPIO_InitStructure);
     48          
     49          	GPIO_InitStructure.GPIO_Pin = US_ECHO_PIN;
     50          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     51          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     52          	GPIO_Init(US_ECHO_PORT, &GPIO_InitStructure);
     53          }
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void InitHCSR04() {
   \                     InitHCSR04: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
     56          	EnableHCSR04PeriphClock();
   \        0x4   0x....'....        BL       EnableHCSR04PeriphClock
     57          	initPins();
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \        0xE   0x2218             MOVS     R2,#+24
   \       0x10   0xF88D 0x2003      STRB     R2,[SP, #+3]
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0x....             LDR.N    R0,??DataTable1  ;; 0x40010c00
   \       0x18   0x....             LDR.N    R4,??DataTable1_1  ;; 0x40000400
   \       0x1A   0x....'....        BL       GPIO_Init
   \       0x1E   0x2040             MOVS     R0,#+64
   \       0x20   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x24   0x2204             MOVS     R2,#+4
   \       0x26   0xF88D 0x2003      STRB     R2,[SP, #+3]
   \       0x2A   0x4669             MOV      R1,SP
   \       0x2C   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40010800
   \       0x2E   0x....'....        BL       GPIO_Init
     58          	initMeasureTimer();
   \       0x32   0xA80A             ADD      R0,SP,#+40
   \       0x34   0x....'....        BL       RCC_GetClocksFreq
   \       0x38   0x980A             LDR      R0,[SP, #+40]
   \       0x3A   0x....             LDR.N    R1,??DataTable1_3  ;; 0xf4240
   \       0x3C   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \       0x40   0x1E4D             SUBS     R5,R1,#+1
   \       0x42   0x4620             MOV      R0,R4
   \       0x44   0x....'....        BL       TIM_DeInit
   \       0x48   0x2100             MOVS     R1,#+0
   \       0x4A   0xF8AD 0x100E      STRH     R1,[SP, #+14]
   \       0x4E   0xF64F 0x72FF      MOVW     R2,#+65535
   \       0x52   0xF8AD 0x1012      STRH     R1,[SP, #+18]
   \       0x56   0xF8AD 0x2010      STRH     R2,[SP, #+16]
   \       0x5A   0xF8AD 0x500C      STRH     R5,[SP, #+12]
   \       0x5E   0xA903             ADD      R1,SP,#+12
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x....'....        BL       TIM_TimeBaseInit
   \       0x66   0xA806             ADD      R0,SP,#+24
   \       0x68   0x....'....        BL       TIM_OCStructInit
   \       0x6C   0x2160             MOVS     R1,#+96
   \       0x6E   0xF8AD 0x1018      STRH     R1,[SP, #+24]
   \       0x72   0x2201             MOVS     R2,#+1
   \       0x74   0xF8AD 0x201A      STRH     R2,[SP, #+26]
   \       0x78   0x210F             MOVS     R1,#+15
   \       0x7A   0xF8AD 0x101E      STRH     R1,[SP, #+30]
   \       0x7E   0x2200             MOVS     R2,#+0
   \       0x80   0xF8AD 0x2020      STRH     R2,[SP, #+32]
   \       0x84   0xA906             ADD      R1,SP,#+24
   \       0x86   0x4620             MOV      R0,R4
   \       0x88   0x....'....        BL       TIM_OC3Init
   \       0x8C   0x2000             MOVS     R0,#+0
   \       0x8E   0x9000             STR      R0,[SP, #+0]
   \       0x90   0x2201             MOVS     R2,#+1
   \       0x92   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \       0x96   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   \       0x9A   0xF8AD 0x2004      STRH     R2,[SP, #+4]
   \       0x9E   0x4669             MOV      R1,SP
   \       0xA0   0x4620             MOV      R0,R4
   \       0xA2   0x....'....        BL       TIM_PWMIConfig
   \       0xA6   0x2150             MOVS     R1,#+80
   \       0xA8   0x4620             MOV      R0,R4
   \       0xAA   0x....'....        BL       TIM_SelectInputTrigger
   \       0xAE   0x2180             MOVS     R1,#+128
   \       0xB0   0x4620             MOV      R0,R4
   \       0xB2   0x....'....        BL       TIM_SelectMasterSlaveMode
   \       0xB6   0x2101             MOVS     R1,#+1
   \       0xB8   0x4620             MOV      R0,R4
   \       0xBA   0x....'....        BL       TIM_CtrlPWMOutputs
   \       0xBE   0x2101             MOVS     R1,#+1
   \       0xC0   0x4620             MOV      R0,R4
   \       0xC2   0x....'....        BL       TIM_ClearFlag
     59          }
   \       0xC6   0xB00F             ADD      SP,SP,#+60
   \       0xC8   0xBD30             POP      {R4,R5,PC}       ;; return
     60          

   \                                 In section .text, align 2, keep-with-next
     61          CPU_INT32S HCSR04GetDistance() {
   \                     HCSR04GetDistance: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     62          	(US_TIMER)->CNT = 0;
   \        0x2   0x....             LDR.N    R4,??DataTable1_1  ;; 0x40000400
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x84A2             STRH     R2,[R4, #+36]
     63          	TIM_Cmd(US_TIMER, ENABLE);
   \        0x8   0x2101             MOVS     R1,#+1
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x....'....        BL       TIM_Cmd
     64          	while(!TIM_GetFlagStatus(US_TIMER, TIM_FLAG_Update));
   \                     ??HCSR04GetDistance_0: (+1)
   \       0x10   0x2101             MOVS     R1,#+1
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       TIM_GetFlagStatus
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD0F9             BEQ.N    ??HCSR04GetDistance_0
     65          	TIM_Cmd(US_TIMER, DISABLE);
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       TIM_Cmd
     66          	TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \       0x24   0x2101             MOVS     R1,#+1
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       TIM_ClearFlag
     67          	return (TIM_GetCapture2(US_TIMER)-TIM_GetCapture1(US_TIMER))*165/1000;
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       TIM_GetCapture2
   \       0x32   0x4605             MOV      R5,R0
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       TIM_GetCapture1
   \       0x3A   0x1A2D             SUBS     R5,R5,R0
   \       0x3C   0x20A5             MOVS     R0,#+165
   \       0x3E   0x4345             MULS     R5,R0,R5
   \       0x40   0xF44F 0x717A      MOV      R1,#+1000
   \       0x44   0xFB95 0xF0F1      SDIV     R0,R5,R1
   \       0x48   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     68          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2103             MOVS     R1,#+3
   \        0x2   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \        0x6   0xF88D 0x1002      STRB     R1,[SP, #+2]
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x000F'4240        DC32     0xf4240

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   HCSR04GetDistance
        16   -> TIM_ClearFlag
        16   -> TIM_Cmd
        16   -> TIM_GetCapture1
        16   -> TIM_GetCapture2
        16   -> TIM_GetFlagStatus
      72   InitHCSR04
        72   -> EnableHCSR04PeriphClock
        72   -> GPIO_Init
        72   -> RCC_GetClocksFreq
        72   -> TIM_ClearFlag
        72   -> TIM_CtrlPWMOutputs
        72   -> TIM_DeInit
        72   -> TIM_OC3Init
        72   -> TIM_OCStructInit
        72   -> TIM_PWMIConfig
        72   -> TIM_SelectInputTrigger
        72   -> TIM_SelectMasterSlaveMode
        72   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      12  ?Subroutine0
      74  HCSR04GetDistance
     202  InitHCSR04

 
 304 bytes in section .text
 
 304 bytes of CODE memory

Errors: none
Warnings: none
