###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         23/Dec/2019  21:46:49
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_mem.c
#    Command line =
#        -f C:\Users\hn829\AppData\Local\Temp\EW9262.tmp
#        (C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_mem.c -lCN
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\os_mem.lst
#    Object file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\os_mem.o
#
###############################################################################

C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_mem.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                            MEMORY MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2007, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_MEM.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.86
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          #include <ucos_ii.h>
     26          #endif
     27          
     28          #if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
     29          /*
     30          *********************************************************************************************************
     31          *                                        CREATE A MEMORY PARTITION
     32          *
     33          * Description : Create a fixed-sized memory partition that will be managed by uC/OS-II.
     34          *
     35          * Arguments   : addr     is the starting address of the memory partition
     36          *
     37          *               nblks    is the number of memory blocks to create from the partition.
     38          *
     39          *               blksize  is the size (in bytes) of each block in the memory partition.
     40          *
     41          *               perr     is a pointer to a variable containing an error message which will be set by
     42          *                        this function to either:
     43          *
     44          *                        OS_ERR_NONE              if the memory partition has been created correctly.
     45          *                        OS_ERR_MEM_INVALID_ADDR  if you are specifying an invalid address for the memory
     46          *                                                 storage of the partition or, the block does not align
     47          *                                                 on a pointer boundary
     48          *                        OS_ERR_MEM_INVALID_PART  no free partitions available
     49          *                        OS_ERR_MEM_INVALID_BLKS  user specified an invalid number of blocks (must be >= 2)
     50          *                        OS_ERR_MEM_INVALID_SIZE  user specified an invalid block size
     51          *                                                   - must be greater than the size of a pointer
     52          *                                                   - must be able to hold an integral number of pointers
     53          * Returns    : != (OS_MEM *)0  is the partition was created
     54          *              == (OS_MEM *)0  if the partition was not created because of invalid arguments or, no
     55          *                              free partition is available.
     56          *********************************************************************************************************
     57          */
     58          
     59          OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
     60          {
     61              OS_MEM    *pmem;
     62              INT8U     *pblk;
     63              void     **plink;
     64              INT32U     i;
     65          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
     66              OS_CPU_SR  cpu_sr = 0;
     67          #endif
     68          
     69          
     70          
     71          #if OS_ARG_CHK_EN > 0              
     72              if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
     73                  return ((OS_MEM *)0);
     74              }
     75              if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
     76                  *perr = OS_ERR_MEM_INVALID_ADDR;
     77                  return ((OS_MEM *)0);
     78              }
     79              if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
     80                  *perr = OS_ERR_MEM_INVALID_ADDR;
     81                  return ((OS_MEM *)0);
     82              }
     83              if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
     84                  *perr = OS_ERR_MEM_INVALID_BLKS;
     85                  return ((OS_MEM *)0);
     86              }
     87              if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
     88                  *perr = OS_ERR_MEM_INVALID_SIZE;
     89                  return ((OS_MEM *)0);
     90              }
     91          #endif
     92              OS_ENTER_CRITICAL();
     93              pmem = OSMemFreeList;                             /* Get next free memory partition                */
     94              if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
     95                  OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
     96              }
     97              OS_EXIT_CRITICAL();
     98              if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
     99                  *perr = OS_ERR_MEM_INVALID_PART;
    100                  return ((OS_MEM *)0);
    101              }
    102              plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    103              pblk  = (INT8U *)((INT32U)addr + blksize);
    104              for (i = 0; i < (nblks - 1); i++) {
    105                 *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    106                  plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    107                  pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    108              }
    109              *plink              = (void *)0;                  /* Last memory block points to NULL              */
    110              pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    111              pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    112              pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    113              pmem->OSMemNBlks    = nblks;
    114              pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    115              *perr               = OS_ERR_NONE;
    116              return (pmem);
    117          }
    118          /*$PAGE*/
    119          /*
    120          *********************************************************************************************************
    121          *                                          GET A MEMORY BLOCK
    122          *
    123          * Description : Get a memory block from a partition
    124          *
    125          * Arguments   : pmem    is a pointer to the memory partition control block
    126          *
    127          *               perr    is a pointer to a variable containing an error message which will be set by this
    128          *                       function to either:
    129          *
    130          *                       OS_ERR_NONE             if the memory partition has been created correctly.
    131          *                       OS_ERR_MEM_NO_FREE_BLKS if there are no more free memory blocks to allocate to caller
    132          *                       OS_ERR_MEM_INVALID_PMEM if you passed a NULL pointer for 'pmem'
    133          *
    134          * Returns     : A pointer to a memory block if no error is detected
    135          *               A pointer to NULL if an error is detected
    136          *********************************************************************************************************
    137          */
    138          
    139          void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
    140          {
    141              void      *pblk;
    142          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    143              OS_CPU_SR  cpu_sr = 0;
    144          #endif
    145          
    146          
    147          
    148          #if OS_ARG_CHK_EN > 0
    149              if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    150                  return ((void *)0);
    151              }
    152              if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    153                  *perr = OS_ERR_MEM_INVALID_PMEM;
    154                  return ((void *)0);
    155              }
    156          #endif
    157              OS_ENTER_CRITICAL();
    158              if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    159                  pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    160                  pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    161                  pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    162                  OS_EXIT_CRITICAL();
    163                  *perr = OS_ERR_NONE;                          /*      No error                                 */
    164                  return (pblk);                                /*      Return memory block to caller            */
    165              }
    166              OS_EXIT_CRITICAL();
    167              *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    168              return ((void *)0);                               /*      Return NULL pointer to caller            */
    169          }
    170          /*$PAGE*/
    171          /*
    172          *********************************************************************************************************
    173          *                                   GET THE NAME OF A MEMORY PARTITION
    174          *
    175          * Description: This function is used to obtain the name assigned to a memory partition.
    176          *
    177          * Arguments  : pmem      is a pointer to the memory partition
    178          *
    179          *              pname     is a pointer to an ASCII string that will receive the name of the memory partition.
    180          *
    181          *              perr      is a pointer to an error code that can contain one of the following values:
    182          *
    183          *                        OS_ERR_NONE                if the name was copied to 'pname'
    184          *                        OS_ERR_MEM_INVALID_PMEM    if you passed a NULL pointer for 'pmem'
    185          *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
    186          *                        OS_ERR_NAME_GET_ISR        You called this function from an ISR
    187          *
    188          * Returns    : The length of the string or 0 if 'pmem' is a NULL pointer.
    189          *********************************************************************************************************
    190          */
    191          
    192          #if OS_MEM_NAME_SIZE > 1
    193          INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
    194          {
    195              INT8U      len;
    196          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    197              OS_CPU_SR  cpu_sr = 0;
    198          #endif
    199          
    200          
    201          
    202          #if OS_ARG_CHK_EN > 0
    203              if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    204                  return (0);
    205              }
    206              if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    207                  *perr = OS_ERR_MEM_INVALID_PMEM;
    208                  return (0);
    209              }
    210              if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    211                  *perr = OS_ERR_PNAME_NULL;
    212                  return (0);
    213              }
    214          #endif
    215              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    216                  *perr = OS_ERR_NAME_GET_ISR;
    217                  return (0);
    218              }
    219              OS_ENTER_CRITICAL();
    220              len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    221              OS_EXIT_CRITICAL();
    222              *perr = OS_ERR_NONE;
    223              return (len);
    224          }
    225          #endif
    226          
    227          /*$PAGE*/
    228          /*
    229          *********************************************************************************************************
    230          *                                 ASSIGN A NAME TO A MEMORY PARTITION
    231          *
    232          * Description: This function assigns a name to a memory partition.
    233          *
    234          * Arguments  : pmem      is a pointer to the memory partition
    235          *
    236          *              pname     is a pointer to an ASCII string that contains the name of the memory partition.
    237          *
    238          *              perr      is a pointer to an error code that can contain one of the following values:
    239          *
    240          *                        OS_ERR_NONE                if the name was copied to 'pname'
    241          *                        OS_ERR_MEM_INVALID_PMEM    if you passed a NULL pointer for 'pmem'
    242          *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
    243          *                        OS_ERR_MEM_NAME_TOO_LONG   if the name doesn't fit in the storage area
    244          *                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
    245          *
    246          * Returns    : None
    247          *********************************************************************************************************
    248          */
    249          
    250          #if OS_MEM_NAME_SIZE > 1
    251          void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
    252          {
    253              INT8U      len;
    254          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    255              OS_CPU_SR  cpu_sr = 0;
    256          #endif
    257          
    258          
    259          
    260          #if OS_ARG_CHK_EN > 0
    261              if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    262                  return;
    263              }
    264              if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    265                  *perr = OS_ERR_MEM_INVALID_PMEM;
    266                  return;
    267              }
    268              if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    269                  *perr = OS_ERR_PNAME_NULL;
    270                  return;
    271              }
    272          #endif
    273              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    274                  *perr = OS_ERR_NAME_SET_ISR;
    275                  return;
    276              }
    277              OS_ENTER_CRITICAL();
    278              len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    279              if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    280                  OS_EXIT_CRITICAL();
    281                  *perr = OS_ERR_MEM_NAME_TOO_LONG;
    282                  return;
    283              }
    284              (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    285              OS_EXIT_CRITICAL();
    286              *perr = OS_ERR_NONE;
    287          }
    288          #endif
    289          
    290          /*$PAGE*/
    291          /*
    292          *********************************************************************************************************
    293          *                                         RELEASE A MEMORY BLOCK
    294          *
    295          * Description : Returns a memory block to a partition
    296          *
    297          * Arguments   : pmem    is a pointer to the memory partition control block
    298          *
    299          *               pblk    is a pointer to the memory block being released.
    300          *
    301          * Returns     : OS_ERR_NONE              if the memory block was inserted into the partition
    302          *               OS_ERR_MEM_FULL          if you are returning a memory block to an already FULL memory
    303          *                                        partition (You freed more blocks than you allocated!)
    304          *               OS_ERR_MEM_INVALID_PMEM  if you passed a NULL pointer for 'pmem'
    305          *               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
    306          *********************************************************************************************************
    307          */
    308          
    309          INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
    310          {
    311          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    312              OS_CPU_SR  cpu_sr = 0;
    313          #endif
    314          
    315          
    316          
    317          #if OS_ARG_CHK_EN > 0
    318              if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    319                  return (OS_ERR_MEM_INVALID_PMEM);
    320              }
    321              if (pblk == (void *)0) {                     /* Must release a valid block                         */
    322                  return (OS_ERR_MEM_INVALID_PBLK);
    323              }
    324          #endif
    325              OS_ENTER_CRITICAL();
    326              if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    327                  OS_EXIT_CRITICAL();
    328                  return (OS_ERR_MEM_FULL);
    329              }
    330              *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    331              pmem->OSMemFreeList = pblk;
    332              pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    333              OS_EXIT_CRITICAL();
    334              return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    335          }
    336          /*$PAGE*/
    337          /*
    338          *********************************************************************************************************
    339          *                                          QUERY MEMORY PARTITION
    340          *
    341          * Description : This function is used to determine the number of free memory blocks and the number of
    342          *               used memory blocks from a memory partition.
    343          *
    344          * Arguments   : pmem        is a pointer to the memory partition control block
    345          *
    346          *               p_mem_data  is a pointer to a structure that will contain information about the memory
    347          *                           partition.
    348          *
    349          * Returns     : OS_ERR_NONE               if no errors were found.
    350          *               OS_ERR_MEM_INVALID_PMEM   if you passed a NULL pointer for 'pmem'
    351          *               OS_ERR_MEM_INVALID_PDATA  if you passed a NULL pointer to the data recipient.
    352          *********************************************************************************************************
    353          */
    354          
    355          #if OS_MEM_QUERY_EN > 0
    356          INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
    357          {
    358          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    359              OS_CPU_SR  cpu_sr = 0;
    360          #endif
    361          
    362          
    363          
    364          #if OS_ARG_CHK_EN > 0
    365              if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    366                  return (OS_ERR_MEM_INVALID_PMEM);
    367              }
    368              if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    369                  return (OS_ERR_MEM_INVALID_PDATA);
    370              }
    371          #endif
    372              OS_ENTER_CRITICAL();
    373              p_mem_data->OSAddr     = pmem->OSMemAddr;
    374              p_mem_data->OSFreeList = pmem->OSMemFreeList;
    375              p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    376              p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    377              p_mem_data->OSNFree    = pmem->OSMemNFree;
    378              OS_EXIT_CRITICAL();
    379              p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    380              return (OS_ERR_NONE);
    381          }
    382          #endif                                           /* OS_MEM_QUERY_EN                                    */
    383          /*$PAGE*/
    384          /*
    385          *********************************************************************************************************
    386          *                                    INITIALIZE MEMORY PARTITION MANAGER
    387          *
    388          * Description : This function is called by uC/OS-II to initialize the memory partition manager.  Your
    389          *               application MUST NOT call this function.
    390          *
    391          * Arguments   : none
    392          *
    393          * Returns     : none
    394          *
    395          * Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
    396          *********************************************************************************************************
    397          */
    398          
    399          void  OS_MemInit (void)
    400          {
    401          #if OS_MAX_MEM_PART == 1
    402              OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    403              OSMemFreeList               = (OS_MEM *)&OSMemTbl[0]; /* Point to beginning of free list           */
    404          #if OS_MEM_NAME_SIZE > 1
    405              OSMemFreeList->OSMemName[0] = '?';                    /* Unknown name                              */
    406              OSMemFreeList->OSMemName[1] = OS_ASCII_NUL;
    407          #endif
    408          #endif
    409          
    410          #if OS_MAX_MEM_PART >= 2
    411              OS_MEM  *pmem;
    412              INT16U   i;
    413          
    414          
    415              OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    416              pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    417              for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    418                  pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    419          #if OS_MEM_NAME_SIZE > 1
    420                  pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    421                  pmem->OSMemName[1]  = OS_ASCII_NUL;
    422          #endif
    423                  pmem++;
    424              }
    425              pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    426          #if OS_MEM_NAME_SIZE > 1
    427              pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    428              pmem->OSMemName[1]  = OS_ASCII_NUL;
    429          #endif
    430          
    431              OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    432          #endif
    433          }
    434          #endif                                                    /* OS_MEM_EN                                 */


 
 
 0 bytes of memory

Errors: none
Warnings: none
