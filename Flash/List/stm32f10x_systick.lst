###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         23/Dec/2019  14:43:42
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\CPU\ST\STM32\src\stm32f10x_systick.c
#    Command line =
#        -f C:\Users\hn829\AppData\Local\Temp\EW31D9.tmp
#        (C:\Baby\test02\exam\ett\Micrium\Software\CPU\ST\STM32\src\stm32f10x_systick.c
#        -lCN
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\stm32f10x_systick.lst
#    Object file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\stm32f10x_systick.o
#
###############################################################################

C:\Baby\test02\exam\ett\Micrium\Software\CPU\ST\STM32\src\stm32f10x_systick.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_systick.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0
      5          * Date               : 05/23/2008
      6          * Description        : This file provides all the SysTick firmware functions.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED 
     15          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "stm32f10x_systick.h"
     20          
     21          /* Private typedef -----------------------------------------------------------*/
     22          /* Private define ------------------------------------------------------------*/
     23          /* ---------------------- SysTick registers bit mask -------------------- */
     24          /* CTRL TICKINT Mask */
     25          #define CTRL_TICKINT_Set      ((u32)0x00000002)
     26          #define CTRL_TICKINT_Reset    ((u32)0xFFFFFFFD)
     27          
     28          /* Private macro -------------------------------------------------------------*/
     29          /* Private variables ---------------------------------------------------------*/
     30          /* Private function prototypes -----------------------------------------------*/
     31          /* Private functions ---------------------------------------------------------*/
     32          
     33          /*******************************************************************************
     34          * Function Name  : SysTick_CLKSourceConfig
     35          * Description    : Configures the SysTick clock source.
     36          * Input          : - SysTick_CLKSource: specifies the SysTick clock source.
     37          *                    This parameter can be one of the following values:
     38          *                       - SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8
     39          *                         selected as SysTick clock source.
     40          *                       - SysTick_CLKSource_HCLK: AHB clock selected as
     41          *                         SysTick clock source.
     42          * Output         : None
     43          * Return         : None
     44          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     45          void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
     46          {
     47            /* Check the parameters */
     48            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
     49          
     50            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \                     SysTick_CLKSourceConfig: (+1)
   \        0x0   0x2804             CMP      R0,#+4
   \        0x2   0x....             LDR.N    R1,??DataTable5  ;; 0xe000e010
   \        0x4   0xD104             BNE.N    ??SysTick_CLKSourceConfig_0
     51            {
     52              SysTick->CTRL |= SysTick_CLKSource_HCLK;
   \        0x6   0x6808             LDR      R0,[R1, #+0]
   \        0x8   0xF040 0x0004      ORR      R0,R0,#0x4
   \        0xC   0x6008             STR      R0,[R1, #+0]
   \        0xE   0x4770             BX       LR
     53            }
     54            else
     55            {
     56              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \                     ??SysTick_CLKSourceConfig_0: (+1)
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0xF022 0x0204      BIC      R2,R2,#0x4
   \       0x16   0x600A             STR      R2,[R1, #+0]
     57            }
     58          }
   \       0x18   0x4770             BX       LR               ;; return
     59          
     60          /*******************************************************************************
     61          * Function Name  : SysTick_SetReload
     62          * Description    : Sets SysTick Reload value.
     63          * Input          : - Reload: SysTick Reload new value.
     64          *                    This parameter must be a number between 1 and 0xFFFFFF.
     65          * Output         : None
     66          * Return         : None
     67          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     68          void SysTick_SetReload(u32 Reload)
     69          {
     70            /* Check the parameters */
     71            assert_param(IS_SYSTICK_RELOAD(Reload));
     72          
     73            SysTick->LOAD = Reload;
   \                     SysTick_SetReload: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable5_1  ;; 0xe000e014
   \        0x2   0x6008             STR      R0,[R1, #+0]
     74          }
   \        0x4   0x4770             BX       LR               ;; return
     75          
     76          /*******************************************************************************
     77          * Function Name  : SysTick_CounterCmd
     78          * Description    : Enables or disables the SysTick counter.
     79          * Input          : - SysTick_Counter: new state of the SysTick counter.
     80          *                    This parameter can be one of the following values:
     81          *                       - SysTick_Counter_Disable: Disable counter
     82          *                       - SysTick_Counter_Enable: Enable counter
     83          *                       - SysTick_Counter_Clear: Clear counter value to 0
     84          * Output         : None
     85          * Return         : None
     86          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          void SysTick_CounterCmd(u32 SysTick_Counter)
     88          {
     89            /* Check the parameters */
     90            assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));
     91          
     92            if (SysTick_Counter == SysTick_Counter_Enable)
   \                     SysTick_CounterCmd: (+1)
   \        0x0   0x2801             CMP      R0,#+1
   \        0x2   0x....             LDR.N    R1,??DataTable5  ;; 0xe000e010
   \        0x4   0xD103             BNE.N    ??SysTick_CounterCmd_0
     93            {
     94              SysTick->CTRL |= SysTick_Counter_Enable;
   \        0x6   0x6808             LDR      R0,[R1, #+0]
   \        0x8   0xF040 0x0001      ORR      R0,R0,#0x1
   \        0xC   0xE005             B.N      ??SysTick_CounterCmd_1
     95            }
     96            else if (SysTick_Counter == SysTick_Counter_Disable) 
   \                     ??SysTick_CounterCmd_0: (+1)
   \        0xE   0xF110 0x0F02      CMN      R0,#+2
   \       0x12   0xD104             BNE.N    ??SysTick_CounterCmd_2
     97            {
     98              SysTick->CTRL &= SysTick_Counter_Disable;
   \       0x14   0x6808             LDR      R0,[R1, #+0]
   \       0x16   0x0840             LSRS     R0,R0,#+1
   \       0x18   0x0040             LSLS     R0,R0,#+1
   \                     ??SysTick_CounterCmd_1: (+1)
   \       0x1A   0x6008             STR      R0,[R1, #+0]
   \       0x1C   0x4770             BX       LR
     99            }
    100            else /* SysTick_Counter == SysTick_Counter_Clear */
    101            {
    102              SysTick->VAL = SysTick_Counter_Clear;
   \                     ??SysTick_CounterCmd_2: (+1)
   \       0x1E   0x2200             MOVS     R2,#+0
   \       0x20   0x608A             STR      R2,[R1, #+8]
    103            }    
    104          }
   \       0x22   0x4770             BX       LR               ;; return
    105          
    106          /*******************************************************************************
    107          * Function Name  : SysTick_ITConfig
    108          * Description    : Enables or disables the SysTick Interrupt.
    109          * Input          : - NewState: new state of the SysTick Interrupt.
    110          *                    This parameter can be: ENABLE or DISABLE.
    111          * Output         : None
    112          * Return         : None
    113          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    114          void SysTick_ITConfig(FunctionalState NewState)
    115          {
    116            /* Check the parameters */
    117            assert_param(IS_FUNCTIONAL_STATE(NewState));
    118          
    119            if (NewState != DISABLE)
   \                     SysTick_ITConfig: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable5  ;; 0xe000e010
   \        0x2   0xB120             CBZ.N    R0,??SysTick_ITConfig_0
    120            {
    121              SysTick->CTRL |= CTRL_TICKINT_Set;
   \        0x4   0x6808             LDR      R0,[R1, #+0]
   \        0x6   0xF040 0x0002      ORR      R0,R0,#0x2
   \        0xA   0x6008             STR      R0,[R1, #+0]
   \        0xC   0x4770             BX       LR
    122            }
    123            else
    124            {
    125              SysTick->CTRL &= CTRL_TICKINT_Reset;
   \                     ??SysTick_ITConfig_0: (+1)
   \        0xE   0x680A             LDR      R2,[R1, #+0]
   \       0x10   0xF022 0x0202      BIC      R2,R2,#0x2
   \       0x14   0x600A             STR      R2,[R1, #+0]
    126            }
    127          }
   \       0x16   0x4770             BX       LR               ;; return
    128          
    129          /*******************************************************************************
    130          * Function Name  : SysTick_GetCounter
    131          * Description    : Gets SysTick counter value.
    132          * Input          : None
    133          * Output         : None
    134          * Return         : SysTick current value
    135          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    136          u32 SysTick_GetCounter(void)
    137          {
    138            return(SysTick->VAL);
   \                     SysTick_GetCounter: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5_2  ;; 0xe000e018
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
    139          }
    140          
    141          /*******************************************************************************
    142          * Function Name  : SysTick_GetFlagStatus
    143          * Description    : Checks whether the specified SysTick flag is set or not.
    144          * Input          : - SysTick_FLAG: specifies the flag to check.
    145          *                    This parameter can be one of the following values:
    146          *                       - SysTick_FLAG_COUNT
    147          *                       - SysTick_FLAG_SKEW
    148          *                       - SysTick_FLAG_NOREF
    149          * Output         : None
    150          * Return         : None
    151          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    152          FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
    153          {
   \                     SysTick_GetFlagStatus: (+1)
   \        0x0   0x4601             MOV      R1,R0
    154            u32 statusreg = 0, tmp = 0 ;
    155            FlagStatus bitstatus = RESET;
    156          
    157            /* Check the parameters */
    158            assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));
    159          
    160            /* Get the SysTick register index */
    161            tmp = SysTick_FLAG >> 3;
    162          
    163            if (tmp == 2) /* The flag to check is in CTRL register */
   \        0x2   0x08CA             LSRS     R2,R1,#+3
   \        0x4   0x....             LDR.N    R0,??DataTable5  ;; 0xe000e010
   \        0x6   0x2A02             CMP      R2,#+2
   \        0x8   0xBF0C             ITE      EQ 
   \        0xA   0x6800             LDREQ    R0,[R0, #+0]
   \        0xC   0x68C0             LDRNE    R0,[R0, #+12]
    164            {
    165              statusreg = SysTick->CTRL;
    166            }
    167            else          /* The flag to check is in CALIB register */
    168            {
    169              statusreg = SysTick->CALIB;
    170            }
    171          
    172            if ((statusreg & ((u32)1 << SysTick_FLAG)) != (u32)RESET)
    173            {
    174              bitstatus = SET;
    175            }
    176            else
    177            {
    178              bitstatus = RESET;
    179            }
    180            return bitstatus;
   \        0xE   0x40C8             LSRS     R0,R0,R1
   \       0x10   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x14   0x4770             BX       LR               ;; return
    181          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0xE000'E014        DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0xE000'E018        DC32     0xe000e018
    182          
    183          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SysTick_CLKSourceConfig
       0   SysTick_CounterCmd
       0   SysTick_GetCounter
       0   SysTick_GetFlagStatus
       0   SysTick_ITConfig
       0   SysTick_SetReload


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      26  SysTick_CLKSourceConfig
      36  SysTick_CounterCmd
       6  SysTick_GetCounter
      22  SysTick_GetFlagStatus
      24  SysTick_ITConfig
       6  SysTick_SetReload

 
 132 bytes in section .text
 
 132 bytes of CODE memory

Errors: none
Warnings: none
