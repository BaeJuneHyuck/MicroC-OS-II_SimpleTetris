###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         23/Dec/2019  21:46:48
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\BSP\bsp_int.c
#    Command line =
#        -f C:\Users\hn829\AppData\Local\Temp\EW8920.tmp
#        (C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\BSP\bsp_int.c
#        -lCN
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\bsp_int.lst
#    Object file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\bsp_int.o
#
###############################################################################

C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\BSP\bsp_int.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     MICIRUM BOARD SUPPORT PACKAGE
      4          *
      5          *                            (c) Copyright 2007-2008; Micrium, Inc.; Weston, FL
      6          *
      7          *                   All rights reserved.  Protected by international copyright laws.
      8          *                   Knowledge of the source code may not be used to write a similar
      9          *                   product.  This file may only be used in accordance with a license
     10          *                   and should not be redistributed in any way.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                        BOARD SUPPORT PACKAGE
     18          *
     19          *                                     ST Microelectronics STM32
     20          *                                              with the
     21          *                                   STM3210B-EVAL Evaluation Board
     22          *
     23          * Filename      : bsp_int.c
     24          * Version       : V1.00
     25          * Programmer(s) : BAN
     26          *********************************************************************************************************
     27          */
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                             INCLUDE FILES
     32          *********************************************************************************************************
     33          */
     34          
     35          #define  BSP_INT_MODULE
     36          #include <bsp.h>
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                            LOCAL DEFINES
     42          *********************************************************************************************************
     43          */
     44          
     45          #define  BSP_INT_SRC_NBR                                 42
     46          
     47          
     48          /*
     49          *********************************************************************************************************
     50          *                                           LOCAL CONSTANTS
     51          *********************************************************************************************************
     52          */
     53          
     54          
     55          /*
     56          *********************************************************************************************************
     57          *                                          LOCAL DATA TYPES
     58          *********************************************************************************************************
     59          */
     60          
     61          
     62          /*
     63          *********************************************************************************************************
     64          *                                            LOCAL TABLES
     65          *********************************************************************************************************
     66          */
     67          

   \                                 In section .bss, align 4
     68          static  CPU_FNCT_VOID  BSP_IntVectTbl[BSP_INT_SRC_NBR];
   \                     BSP_IntVectTbl:
   \        0x0                      DS8 168
     69          
     70          
     71          /*
     72          *********************************************************************************************************
     73          *                                       LOCAL GLOBAL VARIABLES
     74          *********************************************************************************************************
     75          */
     76          
     77          
     78          /*
     79          *********************************************************************************************************
     80          *                                      LOCAL FUNCTION PROTOTYPES
     81          *********************************************************************************************************
     82          */
     83          
     84          static  void  BSP_IntHandler     (CPU_DATA  int_id);
     85          static  void  BSP_IntHandlerDummy(void);
     86          
     87          
     88          /*
     89          *********************************************************************************************************
     90          *                                     LOCAL CONFIGURATION ERRORS
     91          *********************************************************************************************************
     92          */
     93          
     94          
     95          /*
     96          *********************************************************************************************************
     97          *                                              BSP_IntClr()
     98          *
     99          * Description : Clear interrupt.
    100          *
    101          * Argument(s) : int_id      Interrupt to clear.
    102          *
    103          * Return(s)   : none.
    104          *
    105          * Caller(s)   : Application.
    106          *
    107          * Note(s)     : (1) An interrupt does not need to be cleared within the interrupt controller.
    108          *********************************************************************************************************
    109          */
    110          

   \                                 In section .text, align 2, keep-with-next
    111          void  BSP_IntClr (CPU_DATA  int_id)
    112          {
    113          
    114          }
   \                     BSP_IntClr: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    115          
    116          
    117          /*
    118          *********************************************************************************************************
    119          *                                              BSP_IntDis()
    120          *
    121          * Description : Disable interrupt.
    122          *
    123          * Argument(s) : int_id      Interrupt to disable.
    124          *
    125          * Return(s)   : none.
    126          *
    127          * Caller(s)   : Application.
    128          *
    129          * Note(s)     : none.
    130          *********************************************************************************************************
    131          */
    132          

   \                                 In section .text, align 2, keep-with-next
    133          void  BSP_IntDis (CPU_DATA  int_id)
    134          {
    135              if (int_id < BSP_INT_SRC_NBR) {
   \                     BSP_IntDis: (+1)
   \        0x0   0x282A             CMP      R0,#+42
   \        0x2   0xD203             BCS.N    ??BSP_IntDis_0
    136                  CPU_IntSrcDis(int_id + 16);
   \        0x4   0x3010             ADDS     R0,R0,#+16
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0x....'....        B.W      CPU_IntSrcDis
    137              }
    138          }
   \                     ??BSP_IntDis_0: (+1)
   \        0xC   0x4770             BX       LR               ;; return
    139          
    140          
    141          /*
    142          *********************************************************************************************************
    143          *                                           BSP_IntDisAll()
    144          *
    145          * Description : Disable ALL interrupts.
    146          *
    147          * Argument(s) : none.
    148          *
    149          * Return(s)   : none.
    150          *
    151          * Caller(s)   : Application.
    152          *
    153          * Note(s)     : none.
    154          *********************************************************************************************************
    155          */
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void  BSP_IntDisAll (void)
    158          {
    159              CPU_IntDis();
   \                     BSP_IntDisAll: (+1)
   \        0x0   0x....'....        B.W      CPU_IntDis
    160          }
    161          
    162          
    163          /*
    164          *********************************************************************************************************
    165          *                                               BSP_IntEn()
    166          *
    167          * Description : Enable interrupt.
    168          *
    169          * Argument(s) : int_id      Interrupt to enable.
    170          *
    171          * Return(s)   : none.
    172          *
    173          * Caller(s)   : Application.
    174          *
    175          * Note(s)     : none.
    176          *********************************************************************************************************
    177          */
    178          

   \                                 In section .text, align 2, keep-with-next
    179          void  BSP_IntEn (CPU_DATA  int_id)
    180          {
    181              if (int_id < BSP_INT_SRC_NBR) {
   \                     BSP_IntEn: (+1)
   \        0x0   0x282A             CMP      R0,#+42
   \        0x2   0xD203             BCS.N    ??BSP_IntEn_0
    182                  CPU_IntSrcEn(int_id + 16);
   \        0x4   0x3010             ADDS     R0,R0,#+16
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0x....'....        B.W      CPU_IntSrcEn
    183              }
    184          }
   \                     ??BSP_IntEn_0: (+1)
   \        0xC   0x4770             BX       LR               ;; return
    185          
    186          
    187          /*
    188          *********************************************************************************************************
    189          *                                            BSP_IntVectSet()
    190          *
    191          * Description : Assign ISR handler.
    192          *
    193          * Argument(s) : int_id      Interrupt for which vector will be set.
    194          *
    195          *               isr         Handler to assign
    196          *
    197          * Return(s)   : none.
    198          *
    199          * Caller(s)   : Application.
    200          *
    201          * Note(s)     : none.
    202          *********************************************************************************************************
    203          */
    204          

   \                                 In section .text, align 2, keep-with-next
    205          void  BSP_IntVectSet (CPU_DATA       int_id,
    206                                CPU_FNCT_VOID  isr)
    207          {
   \                     BSP_IntVectSet: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    208          #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
    209              CPU_SR   cpu_sr;
    210          #endif
    211          
    212          
    213              if (int_id < BSP_INT_SRC_NBR) {
   \        0x4   0x2C2A             CMP      R4,#+42
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0xD208             BCS.N    ??BSP_IntVectSet_0
    214                  CPU_CRITICAL_ENTER();
   \        0xA   0x....'....        BL       CPU_SR_Save
    215                  BSP_IntVectTbl[int_id] = isr;
   \        0xE   0x....             LDR.N    R1,??DataTable2
   \       0x10   0xF841 0x5024      STR      R5,[R1, R4, LSL #+2]
    216                  CPU_CRITICAL_EXIT();
   \       0x14   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \       0x18   0x....'....        B.W      CPU_SR_Restore
    217              }
    218          }
   \                     ??BSP_IntVectSet_0: (+1)
   \       0x1C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    219          
    220          
    221          /*
    222          *********************************************************************************************************
    223          *                                            BSP_IntPrioSet()
    224          *
    225          * Description : Assign ISR priority.
    226          *
    227          * Argument(s) : int_id      Interrupt for which vector will be set.
    228          *
    229          *               prio        Priority to assign
    230          *
    231          * Return(s)   : none.
    232          *
    233          * Caller(s)   : Application.
    234          *
    235          * Note(s)     : none.
    236          *********************************************************************************************************
    237          */
    238          

   \                                 In section .text, align 2, keep-with-next
    239          void  BSP_IntPrioSet (CPU_DATA    int_id,
    240                                CPU_INT08U  prio)
    241          {
   \                     BSP_IntPrioSet: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
    242          #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
    243              CPU_SR    cpu_sr;
    244          #endif
    245          
    246          
    247              if (int_id < BSP_INT_SRC_NBR) {
   \        0x4   0x2C2A             CMP      R4,#+42
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0xD20C             BCS.N    ??BSP_IntPrioSet_0
    248                  CPU_CRITICAL_ENTER();
   \        0xA   0x....'....        BL       CPU_SR_Save
   \        0xE   0x4606             MOV      R6,R0
    249                  CPU_IntSrcPrioSet(int_id + 16, prio);
   \       0x10   0x3410             ADDS     R4,R4,#+16
   \       0x12   0x4629             MOV      R1,R5
   \       0x14   0xB2E0             UXTB     R0,R4
   \       0x16   0x....'....        BL       CPU_IntSrcPrioSet
    250                  CPU_CRITICAL_EXIT();
   \       0x1A   0x4630             MOV      R0,R6
   \       0x1C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x20   0x....'....        B.W      CPU_SR_Restore
    251              }
    252          }
   \                     ??BSP_IntPrioSet_0: (+1)
   \       0x24   0xBD70             POP      {R4-R6,PC}       ;; return
    253          
    254          
    255          /*
    256          *********************************************************************************************************
    257          *********************************************************************************************************
    258          *                                           INTERNAL FUNCTIONS
    259          *********************************************************************************************************
    260          *********************************************************************************************************
    261          */
    262          
    263          /*
    264          *********************************************************************************************************
    265          *                                              BSP_IntInit()
    266          *
    267          * Description : Initialize interrupts:
    268          *
    269          * Argument(s) : none.
    270          *
    271          * Return(s)   : none.
    272          *
    273          * Caller(s)   : BSP_Init().
    274          *
    275          * Note(s)     : none.
    276          *********************************************************************************************************
    277          */
    278          

   \                                 In section .text, align 2, keep-with-next
    279          void  BSP_IntInit (void)
    280          {
   \                     BSP_IntInit: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    281              CPU_DATA  int_id;
    282          
    283          
    284              for (int_id = 0; int_id < BSP_INT_SRC_NBR; int_id++) {
   \        0x2   0x2400             MOVS     R4,#+0
   \        0x4   0x....'....        ADR.W    R5,BSP_IntHandlerDummy
    285                  BSP_IntVectSet(int_id, BSP_IntHandlerDummy);
   \                     ??BSP_IntInit_0: (+1)
   \        0x8   0x4629             MOV      R1,R5
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x....'....        BL       BSP_IntVectSet
    286              }
   \       0x10   0x1C64             ADDS     R4,R4,#+1
   \       0x12   0x2C2A             CMP      R4,#+42
   \       0x14   0xD3F8             BCC.N    ??BSP_IntInit_0
    287          }
   \       0x16   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    288          
    289          
    290          /*
    291          *********************************************************************************************************
    292          *                                        BSP_IntHandler####()
    293          *
    294          * Description : Handle an interrupt.
    295          *
    296          * Argument(s) : none.
    297          *
    298          * Return(s)   : none.
    299          *
    300          * Caller(s)   : This is an ISR.
    301          *
    302          * Note(s)     : none.
    303          *********************************************************************************************************
    304          */
    305          

   \                                 In section .text, align 2, keep-with-next
    306          void  BSP_IntHandlerWWDG          (void)  { BSP_IntHandler(BSP_INT_ID_WWDG);            }
   \                     BSP_IntHandlerWWDG: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    307          void  BSP_IntHandlerPVD           (void)  { BSP_IntHandler(BSP_INT_ID_PVD);             }
   \                     BSP_IntHandlerPVD: (+1)
   \        0x0   0x2001             MOVS     R0,#+1
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    308          void  BSP_IntHandlerTAMPER        (void)  { BSP_IntHandler(BSP_INT_ID_TAMPER);          }
   \                     BSP_IntHandlerTAMPER: (+1)
   \        0x0   0x2002             MOVS     R0,#+2
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    309          void  BSP_IntHandlerRTC           (void)  { BSP_IntHandler(BSP_INT_ID_RTC);             }
   \                     BSP_IntHandlerRTC: (+1)
   \        0x0   0x2003             MOVS     R0,#+3
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    310          void  BSP_IntHandlerFLASH         (void)  { BSP_IntHandler(BSP_INT_ID_FLASH);           }
   \                     BSP_IntHandlerFLASH: (+1)
   \        0x0   0x2004             MOVS     R0,#+4
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    311          void  BSP_IntHandlerRCC           (void)  { BSP_IntHandler(BSP_INT_ID_RCC);             }
   \                     BSP_IntHandlerRCC: (+1)
   \        0x0   0x2005             MOVS     R0,#+5
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    312          void  BSP_IntHandlerEXTI0         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI0);           }
   \                     BSP_IntHandlerEXTI0: (+1)
   \        0x0   0x2006             MOVS     R0,#+6
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    313          void  BSP_IntHandlerEXTI1         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI1);           }
   \                     BSP_IntHandlerEXTI1: (+1)
   \        0x0   0x2007             MOVS     R0,#+7
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    314          void  BSP_IntHandlerEXTI2         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI2);           }
   \                     BSP_IntHandlerEXTI2: (+1)
   \        0x0   0x2008             MOVS     R0,#+8
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    315          void  BSP_IntHandlerEXTI3         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI3);           }
   \                     BSP_IntHandlerEXTI3: (+1)
   \        0x0   0x2009             MOVS     R0,#+9
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    316          void  BSP_IntHandlerEXTI4         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI4);           }
   \                     BSP_IntHandlerEXTI4: (+1)
   \        0x0   0x200A             MOVS     R0,#+10
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    317          void  BSP_IntHandlerDMA1_CH1      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH1);        }
   \                     BSP_IntHandlerDMA1_CH1: (+1)
   \        0x0   0x200B             MOVS     R0,#+11
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    318          void  BSP_IntHandlerDMA1_CH2      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH2);        }
   \                     BSP_IntHandlerDMA1_CH2: (+1)
   \        0x0   0x200C             MOVS     R0,#+12
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    319          void  BSP_IntHandlerDMA1_CH3      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH3);        }
   \                     BSP_IntHandlerDMA1_CH3: (+1)
   \        0x0   0x200D             MOVS     R0,#+13
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    320          void  BSP_IntHandlerDMA1_CH4      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH4);        }
   \                     BSP_IntHandlerDMA1_CH4: (+1)
   \        0x0   0x200E             MOVS     R0,#+14
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    321          void  BSP_IntHandlerDMA1_CH5      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH5);        }
   \                     BSP_IntHandlerDMA1_CH5: (+1)
   \        0x0   0x200F             MOVS     R0,#+15
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    322          void  BSP_IntHandlerDMA1_CH6      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH6);        }
   \                     BSP_IntHandlerDMA1_CH6: (+1)
   \        0x0   0x2010             MOVS     R0,#+16
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    323          void  BSP_IntHandlerDMA1_CH7      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH7);        }
   \                     BSP_IntHandlerDMA1_CH7: (+1)
   \        0x0   0x2011             MOVS     R0,#+17
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    324          void  BSP_IntHandlerADC1_2        (void)  { BSP_IntHandler(BSP_INT_ID_ADC1_2);          }
   \                     BSP_IntHandlerADC1_2: (+1)
   \        0x0   0x2012             MOVS     R0,#+18
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    325          void  BSP_IntHandlerUSB_HP_CAN_TX (void)  { BSP_IntHandler(BSP_INT_ID_USB_HP_CAN_TX);   }
   \                     BSP_IntHandlerUSB_HP_CAN_TX: (+1)
   \        0x0   0x2013             MOVS     R0,#+19
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    326          void  BSP_IntHandlerUSB_LP_CAN_RX0(void)  { BSP_IntHandler(BSP_INT_ID_USB_LP_CAN_RX0);  }
   \                     BSP_IntHandlerUSB_LP_CAN_RX0: (+1)
   \        0x0   0x2014             MOVS     R0,#+20
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    327          void  BSP_IntHandlerCAN_RX1       (void)  { BSP_IntHandler(BSP_INT_ID_CAN_RX1);         }
   \                     BSP_IntHandlerCAN_RX1: (+1)
   \        0x0   0x2015             MOVS     R0,#+21
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    328          void  BSP_IntHandlerCAN_SCE       (void)  { BSP_IntHandler(BSP_INT_ID_CAN_SCE);         }
   \                     BSP_IntHandlerCAN_SCE: (+1)
   \        0x0   0x2016             MOVS     R0,#+22
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    329          void  BSP_IntHandlerEXTI9_5       (void)  { BSP_IntHandler(BSP_INT_ID_EXTI9_5);         }
   \                     BSP_IntHandlerEXTI9_5: (+1)
   \        0x0   0x2017             MOVS     R0,#+23
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    330          void  BSP_IntHandlerTIM1_BRK      (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_BRK);        }
   \                     BSP_IntHandlerTIM1_BRK: (+1)
   \        0x0   0x2018             MOVS     R0,#+24
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    331          void  BSP_IntHandlerTIM1_UP       (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_UP);         }
   \                     BSP_IntHandlerTIM1_UP: (+1)
   \        0x0   0x2019             MOVS     R0,#+25
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    332          void  BSP_IntHandlerTIM1_TRG_COM  (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_TRG_COM);    }
   \                     BSP_IntHandlerTIM1_TRG_COM: (+1)
   \        0x0   0x201A             MOVS     R0,#+26
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    333          void  BSP_IntHandlerTIM1_CC       (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_CC);         }
   \                     BSP_IntHandlerTIM1_CC: (+1)
   \        0x0   0x201B             MOVS     R0,#+27
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    334          void  BSP_IntHandlerTIM2          (void)  { BSP_IntHandler(BSP_INT_ID_TIM2);            }
   \                     BSP_IntHandlerTIM2: (+1)
   \        0x0   0x201C             MOVS     R0,#+28
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    335          void  BSP_IntHandlerTIM3          (void)  { BSP_IntHandler(BSP_INT_ID_TIM3);            }
   \                     BSP_IntHandlerTIM3: (+1)
   \        0x0   0x201D             MOVS     R0,#+29
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    336          void  BSP_IntHandlerTIM4          (void)  { BSP_IntHandler(BSP_INT_ID_TIM4);            }
   \                     BSP_IntHandlerTIM4: (+1)
   \        0x0   0x201E             MOVS     R0,#+30
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    337          void  BSP_IntHandlerI2C1_EV       (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_EV);         }
   \                     BSP_IntHandlerI2C1_EV: (+1)
   \        0x0   0x201F             MOVS     R0,#+31
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    338          void  BSP_IntHandlerI2C1_ER       (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_ER);         }
   \                     BSP_IntHandlerI2C1_ER: (+1)
   \        0x0   0x2020             MOVS     R0,#+32
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    339          void  BSP_IntHandlerI2C2_EV       (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_EV);         }
   \                     BSP_IntHandlerI2C2_EV: (+1)
   \        0x0   0x2021             MOVS     R0,#+33
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    340          void  BSP_IntHandlerI2C2_ER       (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_ER);         }
   \                     BSP_IntHandlerI2C2_ER: (+1)
   \        0x0   0x2022             MOVS     R0,#+34
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    341          void  BSP_IntHandlerSPI1          (void)  { BSP_IntHandler(BSP_INT_ID_SPI1);            }
   \                     BSP_IntHandlerSPI1: (+1)
   \        0x0   0x2023             MOVS     R0,#+35
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    342          void  BSP_IntHandlerSPI2          (void)  { BSP_IntHandler(BSP_INT_ID_SPI2);            }
   \                     BSP_IntHandlerSPI2: (+1)
   \        0x0   0x2024             MOVS     R0,#+36
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    343          void  BSP_IntHandlerUSART1        (void)  { BSP_IntHandler(BSP_INT_ID_USART1);          }
   \                     BSP_IntHandlerUSART1: (+1)
   \        0x0   0x2025             MOVS     R0,#+37
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    344          void  BSP_IntHandlerUSART2        (void)  { BSP_IntHandler(BSP_INT_ID_USART2);          }
   \                     BSP_IntHandlerUSART2: (+1)
   \        0x0   0x2026             MOVS     R0,#+38
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    345          void  BSP_IntHandlerUSART3        (void)  { BSP_IntHandler(BSP_INT_ID_USART3);          }
   \                     BSP_IntHandlerUSART3: (+1)
   \        0x0   0x2027             MOVS     R0,#+39
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    346          void  BSP_IntHandlerEXTI15_10     (void)  { BSP_IntHandler(BSP_INT_ID_EXTI15_10);       }
   \                     BSP_IntHandlerEXTI15_10: (+1)
   \        0x0   0x2028             MOVS     R0,#+40
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    347          void  BSP_IntHandlerRTCAlarm      (void)  { BSP_IntHandler(BSP_INT_ID_RTCAlarm);        }
   \                     BSP_IntHandlerRTCAlarm: (+1)
   \        0x0   0x2029             MOVS     R0,#+41
   \        0x2   0x....             B.N      BSP_IntHandler

   \                                 In section .text, align 2, keep-with-next
    348          void  BSP_IntHandlerUSBWakeUp     (void)  { BSP_IntHandler(BSP_INT_ID_USBWakeUp);       }
   \                     BSP_IntHandlerUSBWakeUp: (+1)
   \        0x0   0x202A             MOVS     R0,#+42
   \        0x2                      REQUIRE BSP_IntHandler
   \        0x2                      ;; // Fall through to label BSP_IntHandler
    349          
    350          
    351          /*
    352          *********************************************************************************************************
    353          *********************************************************************************************************
    354          *                                           LOCAL FUNCTIONS
    355          *********************************************************************************************************
    356          *********************************************************************************************************
    357          */
    358          
    359          /*
    360          *********************************************************************************************************
    361          *                                          BSP_IntHandler()
    362          *
    363          * Description : Central interrupt handler.
    364          *
    365          * Argument(s) : int_id          Interrupt that will be handled.
    366          *
    367          * Return(s)   : none.
    368          *
    369          * Caller(s)   : ISR handlers.
    370          *
    371          * Note(s)     : none.
    372          *********************************************************************************************************
    373          */
    374          

   \                                 In section .text, align 2, keep-with-next
    375          static  void  BSP_IntHandler (CPU_DATA  int_id)
    376          {
   \                     BSP_IntHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    377          #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
    378              CPU_SR         cpu_sr;
    379          #endif
    380              CPU_FNCT_VOID  isr;
    381          
    382          
    383              CPU_CRITICAL_ENTER();                                       /* Tell uC/OS-II that we are starting an ISR            */
   \        0x4   0x....'....        BL       CPU_SR_Save
    384              OSIntNesting++;
   \        0x8   0x....             LDR.N    R1,??DataTable2_1
   \        0xA   0x780A             LDRB     R2,[R1, #+0]
   \        0xC   0x1C52             ADDS     R2,R2,#+1
   \        0xE   0x700A             STRB     R2,[R1, #+0]
    385              CPU_CRITICAL_EXIT();
   \       0x10   0x....'....        BL       CPU_SR_Restore
    386          
    387              if (int_id < BSP_INT_SRC_NBR) {
   \       0x14   0x2C2A             CMP      R4,#+42
   \       0x16   0xD205             BCS.N    ??BSP_IntHandler_0
    388                  isr = BSP_IntVectTbl[int_id];
   \       0x18   0x....             LDR.N    R0,??DataTable2
   \       0x1A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
    389                  if (isr != (CPU_FNCT_VOID)0) {
   \       0x1E   0x0001             MOVS     R1,R0
   \       0x20   0xBF18             IT       NE 
    390                      isr();
   \       0x22   0x4780             BLXNE    R0
    391                  }
    392              }
    393          
    394              OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
   \                     ??BSP_IntHandler_0: (+1)
   \       0x24   0xE8BD 0x4010      POP      {R4,LR}
   \       0x28   0x....'....        B.W      OSIntExit
    395          }
    396          
    397          
    398          /*
    399          *********************************************************************************************************
    400          *                                        BSP_IntHandlerDummy()
    401          *
    402          * Description : Dummy interrupt handler.
    403          *
    404          * Argument(s) : none.
    405          *
    406          * Return(s)   : none.
    407          *
    408          * Caller(s)   : BSP_IntHandler().
    409          *
    410          * Note(s)     : none.
    411          *********************************************************************************************************
    412          */
    413          

   \                                 In section .text, align 4, keep-with-next
    414          static  void  BSP_IntHandlerDummy (void)
    415          {
    416          
    417          }
   \                     BSP_IntHandlerDummy: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     BSP_IntVectTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     OSIntNesting

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BSP_IntClr
       0   BSP_IntDis
         0   -> CPU_IntSrcDis
       0   BSP_IntDisAll
         0   -> CPU_IntDis
       0   BSP_IntEn
         0   -> CPU_IntSrcEn
       8   BSP_IntHandler
         8   -- Indirect call
         8   -> CPU_SR_Restore
         8   -> CPU_SR_Save
         0   -> OSIntExit
       0   BSP_IntHandlerADC1_2
         0   -> BSP_IntHandler
       0   BSP_IntHandlerCAN_RX1
         0   -> BSP_IntHandler
       0   BSP_IntHandlerCAN_SCE
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDMA1_CH1
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDMA1_CH2
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDMA1_CH3
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDMA1_CH4
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDMA1_CH5
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDMA1_CH6
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDMA1_CH7
         0   -> BSP_IntHandler
       0   BSP_IntHandlerDummy
       0   BSP_IntHandlerEXTI0
         0   -> BSP_IntHandler
       0   BSP_IntHandlerEXTI1
         0   -> BSP_IntHandler
       0   BSP_IntHandlerEXTI15_10
         0   -> BSP_IntHandler
       0   BSP_IntHandlerEXTI2
         0   -> BSP_IntHandler
       0   BSP_IntHandlerEXTI3
         0   -> BSP_IntHandler
       0   BSP_IntHandlerEXTI4
         0   -> BSP_IntHandler
       0   BSP_IntHandlerEXTI9_5
         0   -> BSP_IntHandler
       0   BSP_IntHandlerFLASH
         0   -> BSP_IntHandler
       0   BSP_IntHandlerI2C1_ER
         0   -> BSP_IntHandler
       0   BSP_IntHandlerI2C1_EV
         0   -> BSP_IntHandler
       0   BSP_IntHandlerI2C2_ER
         0   -> BSP_IntHandler
       0   BSP_IntHandlerI2C2_EV
         0   -> BSP_IntHandler
       0   BSP_IntHandlerPVD
         0   -> BSP_IntHandler
       0   BSP_IntHandlerRCC
         0   -> BSP_IntHandler
       0   BSP_IntHandlerRTC
         0   -> BSP_IntHandler
       0   BSP_IntHandlerRTCAlarm
         0   -> BSP_IntHandler
       0   BSP_IntHandlerSPI1
         0   -> BSP_IntHandler
       0   BSP_IntHandlerSPI2
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTAMPER
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTIM1_BRK
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTIM1_CC
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTIM1_TRG_COM
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTIM1_UP
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTIM2
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTIM3
         0   -> BSP_IntHandler
       0   BSP_IntHandlerTIM4
         0   -> BSP_IntHandler
       0   BSP_IntHandlerUSART1
         0   -> BSP_IntHandler
       0   BSP_IntHandlerUSART2
         0   -> BSP_IntHandler
       0   BSP_IntHandlerUSART3
         0   -> BSP_IntHandler
       0   BSP_IntHandlerUSBWakeUp
         0   -> BSP_IntHandler
       0   BSP_IntHandlerUSB_HP_CAN_TX
         0   -> BSP_IntHandler
       0   BSP_IntHandlerUSB_LP_CAN_RX0
         0   -> BSP_IntHandler
       0   BSP_IntHandlerWWDG
         0   -> BSP_IntHandler
      16   BSP_IntInit
        16   -> BSP_IntVectSet
      16   BSP_IntPrioSet
        16   -> CPU_IntSrcPrioSet
         0   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      16   BSP_IntVectSet
         0   -> CPU_SR_Restore
        16   -> CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       2  BSP_IntClr
      14  BSP_IntDis
       4  BSP_IntDisAll
      14  BSP_IntEn
      44  BSP_IntHandler
       4  BSP_IntHandlerADC1_2
       4  BSP_IntHandlerCAN_RX1
       4  BSP_IntHandlerCAN_SCE
       4  BSP_IntHandlerDMA1_CH1
       4  BSP_IntHandlerDMA1_CH2
       4  BSP_IntHandlerDMA1_CH3
       4  BSP_IntHandlerDMA1_CH4
       4  BSP_IntHandlerDMA1_CH5
       4  BSP_IntHandlerDMA1_CH6
       4  BSP_IntHandlerDMA1_CH7
       2  BSP_IntHandlerDummy
       4  BSP_IntHandlerEXTI0
       4  BSP_IntHandlerEXTI1
       4  BSP_IntHandlerEXTI15_10
       4  BSP_IntHandlerEXTI2
       4  BSP_IntHandlerEXTI3
       4  BSP_IntHandlerEXTI4
       4  BSP_IntHandlerEXTI9_5
       4  BSP_IntHandlerFLASH
       4  BSP_IntHandlerI2C1_ER
       4  BSP_IntHandlerI2C1_EV
       4  BSP_IntHandlerI2C2_ER
       4  BSP_IntHandlerI2C2_EV
       4  BSP_IntHandlerPVD
       4  BSP_IntHandlerRCC
       4  BSP_IntHandlerRTC
       4  BSP_IntHandlerRTCAlarm
       4  BSP_IntHandlerSPI1
       4  BSP_IntHandlerSPI2
       4  BSP_IntHandlerTAMPER
       4  BSP_IntHandlerTIM1_BRK
       4  BSP_IntHandlerTIM1_CC
       4  BSP_IntHandlerTIM1_TRG_COM
       4  BSP_IntHandlerTIM1_UP
       4  BSP_IntHandlerTIM2
       4  BSP_IntHandlerTIM3
       4  BSP_IntHandlerTIM4
       4  BSP_IntHandlerUSART1
       4  BSP_IntHandlerUSART2
       4  BSP_IntHandlerUSART3
       2  BSP_IntHandlerUSBWakeUp
       4  BSP_IntHandlerUSB_HP_CAN_TX
       4  BSP_IntHandlerUSB_LP_CAN_RX0
       4  BSP_IntHandlerWWDG
      24  BSP_IntInit
      38  BSP_IntPrioSet
      30  BSP_IntVectSet
     168  BSP_IntVectTbl

 
 168 bytes in section .bss
 350 bytes in section .text
 
 350 bytes of CODE memory
 168 bytes of DATA memory

Errors: none
Warnings: none
