###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         23/Dec/2019  21:46:49
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_mbox.c
#    Command line =
#        -f C:\Users\hn829\AppData\Local\Temp\EW9241.tmp
#        (C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_mbox.c
#        -lCN
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List
#        -o
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\
#        -I
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\
#        -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\os_mbox.lst
#    Object file  =
#        C:\Baby\test02\exam\ett\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\os_mbox.o
#
###############################################################################

C:\Baby\test02\exam\ett\Micrium\Software\uCOS-II\Source\os_mbox.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                       MESSAGE MAILBOX MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2007, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_MBOX.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.86
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          #include <ucos_ii.h>
     26          #endif
     27          
     28          #if OS_MBOX_EN > 0
     29          /*
     30          *********************************************************************************************************
     31          *                                     ACCEPT MESSAGE FROM MAILBOX
     32          *
     33          * Description: This function checks the mailbox to see if a message is available.  Unlike OSMboxPend(),
     34          *              OSMboxAccept() does not suspend the calling task if a message is not available.
     35          *
     36          * Arguments  : pevent        is a pointer to the event control block
     37          *
     38          * Returns    : != (void *)0  is the message in the mailbox if one is available.  The mailbox is cleared
     39          *                            so the next time OSMboxAccept() is called, the mailbox will be empty.
     40          *              == (void *)0  if the mailbox is empty or,
     41          *                            if 'pevent' is a NULL pointer or,
     42          *                            if you didn't pass the proper event pointer.
     43          *********************************************************************************************************
     44          */
     45          
     46          #if OS_MBOX_ACCEPT_EN > 0

   \                                 In section .text, align 2, keep-with-next
     47          void  *OSMboxAccept (OS_EVENT *pevent)
     48          {
   \                     OSMboxAccept: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
     49              void      *pmsg;
     50          #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
     51              OS_CPU_SR  cpu_sr = 0;
     52          #endif
     53          
     54          
     55          
     56          #if OS_ARG_CHK_EN > 0
     57              if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
     58                  return ((void *)0);
     59              }
     60          #endif
     61              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   \        0x4   0x7820             LDRB     R0,[R4, #+0]
   \        0x6   0x2801             CMP      R0,#+1
   \        0x8   0xD001             BEQ.N    ??OSMboxAccept_0
     62                  return ((void *)0);
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBD32             POP      {R1,R4,R5,PC}
     63              }
     64              OS_ENTER_CRITICAL();
   \                     ??OSMboxAccept_0: (+1)
   \        0xE   0x....'....        BL       OS_CPU_SR_Save
     65              pmsg               = pevent->OSEventPtr;
   \       0x12   0x6865             LDR      R5,[R4, #+4]
     66              pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   \       0x14   0x2100             MOVS     R1,#+0
   \       0x16   0x6061             STR      R1,[R4, #+4]
     67              OS_EXIT_CRITICAL();
   \       0x18   0x....'....        BL       OS_CPU_SR_Restore
     68              return (pmsg);                                        /* Return the message received (or NULL)     */
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     69          }
     70          #endif
     71          /*$PAGE*/
     72          /*
     73          *********************************************************************************************************
     74          *                                        CREATE A MESSAGE MAILBOX
     75          *
     76          * Description: This function creates a message mailbox if free event control blocks are available.
     77          *
     78          * Arguments  : pmsg          is a pointer to a message that you wish to deposit in the mailbox.  If
     79          *                            you set this value to the NULL pointer (i.e. (void *)0) then the mailbox
     80          *                            will be considered empty.
     81          *
     82          * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
     83          *                                created mailbox
     84          *              == (OS_EVENT *)0  if no event control blocks were available
     85          *********************************************************************************************************
     86          */
     87          

   \                                 In section .text, align 2, keep-with-next
     88          OS_EVENT  *OSMboxCreate (void *pmsg)
     89          {
   \                     OSMboxCreate: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     90              OS_EVENT  *pevent;
     91          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
     92              OS_CPU_SR  cpu_sr = 0;
     93          #endif
     94          
     95          
     96          
     97              if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   \        0x2   0x....             LDR.N    R1,??DataTable3
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x7808             LDRB     R0,[R1, #+0]
   \        0x8   0xB108             CBZ.N    R0,??OSMboxCreate_0
     98                  return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBD32             POP      {R1,R4,R5,PC}
     99              }
    100              OS_ENTER_CRITICAL();
   \                     ??OSMboxCreate_0: (+1)
   \        0xE   0x....'....        BL       OS_CPU_SR_Save
    101              pevent = OSEventFreeList;                    /* Get next free event control block                  */
   \       0x12   0x....             LDR.N    R2,??DataTable3_1
   \       0x14   0x6811             LDR      R1,[R2, #+0]
   \       0x16   0x000C             MOVS     R4,R1
    102              if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   \       0x18   0xBF1C             ITT      NE 
   \       0x1A   0x6849             LDRNE    R1,[R1, #+4]
   \       0x1C   0x6011             STRNE    R1,[R2, #+0]
    103                  OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    104              }
    105              OS_EXIT_CRITICAL();
   \       0x1E   0x....'....        BL       OS_CPU_SR_Restore
    106              if (pevent != (OS_EVENT *)0) {
   \       0x22   0xB154             CBZ.N    R4,??OSMboxCreate_1
    107                  pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0x7020             STRB     R0,[R4, #+0]
    108                  pevent->OSEventCnt     = 0;
   \       0x28   0x2100             MOVS     R1,#+0
    109                  pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
    110          #if OS_EVENT_NAME_SIZE > 1
    111                  pevent->OSEventName[0] = '?';
   \       0x2A   0x203F             MOVS     R0,#+63
   \       0x2C   0x73E0             STRB     R0,[R4, #+15]
   \       0x2E   0x8121             STRH     R1,[R4, #+8]
    112                  pevent->OSEventName[1] = OS_ASCII_NUL;
   \       0x30   0x7421             STRB     R1,[R4, #+16]
   \       0x32   0x6065             STR      R5,[R4, #+4]
    113          #endif
    114                  OS_EventWaitListInit(pevent);
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       OS_EventWaitListInit
    115              }
    116              return (pevent);                             /* Return pointer to event control block              */
   \                     ??OSMboxCreate_1: (+1)
   \       0x3A   0x4620             MOV      R0,R4
   \       0x3C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    117          }
    118          /*$PAGE*/
    119          /*
    120          *********************************************************************************************************
    121          *                                         DELETE A MAIBOX
    122          *
    123          * Description: This function deletes a mailbox and readies all tasks pending on the mailbox.
    124          *
    125          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    126          *                            mailbox.
    127          *
    128          *              opt           determines delete options as follows:
    129          *                            opt == OS_DEL_NO_PEND   Delete the mailbox ONLY if no task pending
    130          *                            opt == OS_DEL_ALWAYS    Deletes the mailbox even if tasks are waiting.
    131          *                                                    In this case, all the tasks pending will be readied.
    132          *
    133          *              perr          is a pointer to an error code that can contain one of the following values:
    134          *                            OS_ERR_NONE             The call was successful and the mailbox was deleted
    135          *                            OS_ERR_DEL_ISR          If you attempted to delete the mailbox from an ISR
    136          *                            OS_ERR_INVALID_OPT      An invalid option was specified
    137          *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mailbox
    138          *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mailbox
    139          *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
    140          *
    141          * Returns    : pevent        upon error
    142          *              (OS_EVENT *)0 if the mailbox was successfully deleted.
    143          *
    144          * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
    145          *                 the mailbox MUST check the return code of OSMboxPend().
    146          *              2) OSMboxAccept() callers will not know that the intended mailbox has been deleted!
    147          *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
    148          *                 time is directly proportional to the number of tasks waiting on the mailbox.
    149          *              4) Because ALL tasks pending on the mailbox will be readied, you MUST be careful in
    150          *                 applications where the mailbox is used for mutual exclusion because the resource(s)
    151          *                 will no longer be guarded by the mailbox.
    152          *********************************************************************************************************
    153          */
    154          
    155          #if OS_MBOX_DEL_EN > 0

   \                                 In section .text, align 2, keep-with-next
    156          OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
    157          {
   \                     OSMboxDel: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4689             MOV      R9,R1
    158              BOOLEAN    tasks_waiting;
    159              OS_EVENT  *pevent_return;
    160          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    161              OS_CPU_SR  cpu_sr = 0;
    162          #endif
    163          
    164          
    165          
    166          #if OS_ARG_CHK_EN > 0
    167              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    168                  return (pevent);
    169              }
    170              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    171                  *perr = OS_ERR_PEVENT_NULL;
    172                  return (pevent);
    173              }
    174          #endif
    175              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   \        0x8   0x7828             LDRB     R0,[R5, #+0]
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0x4616             MOV      R6,R2
   \        0xE   0xD001             BEQ.N    ??OSMboxDel_0
    176                  *perr = OS_ERR_EVENT_TYPE;
   \       0x10   0x2101             MOVS     R1,#+1
   \       0x12   0xE003             B.N      ??OSMboxDel_1
    177                  return (pevent);
    178              }
    179              if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   \                     ??OSMboxDel_0: (+1)
   \       0x14   0x....             LDR.N    R2,??DataTable3
   \       0x16   0x7810             LDRB     R0,[R2, #+0]
   \       0x18   0xB110             CBZ.N    R0,??OSMboxDel_2
    180                  *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   \       0x1A   0x210F             MOVS     R1,#+15
   \                     ??OSMboxDel_1: (+1)
   \       0x1C   0x7031             STRB     R1,[R6, #+0]
    181                  return (pevent);
   \       0x1E   0xE03B             B.N      ??OSMboxDel_3
    182              }
    183              OS_ENTER_CRITICAL();
   \                     ??OSMboxDel_2: (+1)
   \       0x20   0x....'....        BL       OS_CPU_SR_Save
    184              if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   \       0x24   0x7AAC             LDRB     R4,[R5, #+10]
   \       0x26   0x4680             MOV      R8,R0
   \       0x28   0xB104             CBZ.N    R4,??OSMboxDel_4
   \       0x2A   0x2401             MOVS     R4,#+1
    185                  tasks_waiting = OS_TRUE;                           /* Yes                                      */
    186              } else {
    187                  tasks_waiting = OS_FALSE;                          /* No                                       */
    188              }
    189              switch (opt) {
   \                     ??OSMboxDel_4: (+1)
   \       0x2C   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x30   0x....             LDR.N    R7,??DataTable3_1
   \       0x32   0xD003             BEQ.N    ??OSMboxDel_5
   \       0x34   0xF1B9 0x0F01      CMP      R9,#+1
   \       0x38   0xD015             BEQ.N    ??CrossCallReturnLabel_0
   \       0x3A   0xE029             B.N      ??OSMboxDel_6
    190                  case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
    191                       if (tasks_waiting == OS_FALSE) {
   \                     ??OSMboxDel_5: (+1)
   \       0x3C   0xB964             CBNZ.N   R4,??OSMboxDel_7
    192          #if OS_EVENT_NAME_SIZE > 1
    193                           pevent->OSEventName[0] = '?';             /* Unknown name                             */
   \       0x3E   0x203F             MOVS     R0,#+63
    194                           pevent->OSEventName[1] = OS_ASCII_NUL;
   \       0x40   0x2100             MOVS     R1,#+0
   \       0x42   0x73E8             STRB     R0,[R5, #+15]
   \       0x44   0x7429             STRB     R1,[R5, #+16]
    195          #endif
    196                           pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   \       0x46   0x7029             STRB     R1,[R5, #+0]
    197                           pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
    198                           pevent->OSEventCnt  = 0;
    199                           OSEventFreeList     = pevent;             /* Get next free event control block        */
    200                           OS_EXIT_CRITICAL();
   \       0x48   0x4640             MOV      R0,R8
   \       0x4A   0x683A             LDR      R2,[R7, #+0]
   \       0x4C   0x606A             STR      R2,[R5, #+4]
   \       0x4E   0x8129             STRH     R1,[R5, #+8]
   \       0x50   0x603D             STR      R5,[R7, #+0]
   \       0x52   0x....'....        BL       OS_CPU_SR_Restore
    201                           *perr               = OS_ERR_NONE;
   \       0x56   0xE017             B.N      ??OSMboxDel_8
    202                           pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
    203                       } else {
    204                           OS_EXIT_CRITICAL();
   \                     ??OSMboxDel_7: (+1)
   \       0x58   0x....'....        BL       OS_CPU_SR_Restore
    205                           *perr               = OS_ERR_TASK_WAITING;
   \       0x5C   0x2049             MOVS     R0,#+73
   \       0x5E   0xE01A             B.N      ??OSMboxDel_9
    206                           pevent_return       = pevent;
    207                       }
    208                       break;
    209          
    210                  case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
    211                       while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
    212                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   \                     ??OSMboxDel_10: (+1)
   \       0x60   0x2300             MOVS     R3,#+0
   \       0x62   0x....'....        BL       ??Subroutine0_0
    213                       }
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x66   0x7AA8             LDRB     R0,[R5, #+10]
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD1F9             BNE.N    ??OSMboxDel_10
    214          #if OS_EVENT_NAME_SIZE > 1
    215                       pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   \       0x6C   0x213F             MOVS     R1,#+63
   \       0x6E   0x73E9             STRB     R1,[R5, #+15]
    216                       pevent->OSEventName[1] = OS_ASCII_NUL;
   \       0x70   0x7428             STRB     R0,[R5, #+16]
    217          #endif
    218                       pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   \       0x72   0x2100             MOVS     R1,#+0
   \       0x74   0x7029             STRB     R1,[R5, #+0]
    219                       pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   \       0x76   0x683A             LDR      R2,[R7, #+0]
   \       0x78   0x606A             STR      R2,[R5, #+4]
    220                       pevent->OSEventCnt     = 0;
   \       0x7A   0x8128             STRH     R0,[R5, #+8]
    221                       OSEventFreeList        = pevent;              /* Get next free event control block        */
   \       0x7C   0x603D             STR      R5,[R7, #+0]
    222                       OS_EXIT_CRITICAL();
   \       0x7E   0x....'....        BL       ?Subroutine2
    223                       if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x82   0xB10C             CBZ.N    R4,??OSMboxDel_8
    224                           OS_Sched();                               /* Find highest priority task ready to run  */
   \       0x84   0x....'....        BL       OS_Sched
    225                       }
    226                       *perr         = OS_ERR_NONE;
   \                     ??OSMboxDel_8: (+1)
   \       0x88   0x2000             MOVS     R0,#+0
   \       0x8A   0x7030             STRB     R0,[R6, #+0]
    227                       pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   \       0x8C   0x2500             MOVS     R5,#+0
    228                       break;
   \       0x8E   0xE003             B.N      ??OSMboxDel_3
    229          
    230                  default:
    231                       OS_EXIT_CRITICAL();
   \                     ??OSMboxDel_6: (+1)
   \       0x90   0x....'....        BL       OS_CPU_SR_Restore
    232                       *perr         = OS_ERR_INVALID_OPT;
   \       0x94   0x2007             MOVS     R0,#+7
   \                     ??OSMboxDel_9: (+1)
   \       0x96   0x7030             STRB     R0,[R6, #+0]
    233                       pevent_return = pevent;
    234                       break;
    235              }
    236              return (pevent_return);
   \                     ??OSMboxDel_3: (+1)
   \       0x98   0x4628             MOV      R0,R5
   \       0x9A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    237          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x4640             MOV      R0,R8
   \        0x2   0x....'....        B.W      OS_CPU_SR_Restore

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2302             MOVS     R3,#+2
   \                     ??Subroutine0_0: (+1)
   \        0x2   0x2202             MOVS     R2,#+2
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x....'....        B.W      OS_EventTaskRdy
    238          #endif
    239          
    240          /*$PAGE*/
    241          /*
    242          *********************************************************************************************************
    243          *                                      PEND ON MAILBOX FOR A MESSAGE
    244          *
    245          * Description: This function waits for a message to be sent to a mailbox
    246          *
    247          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    248          *
    249          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
    250          *                            wait for a message to arrive at the mailbox up to the amount of time
    251          *                            specified by this argument.  If you specify 0, however, your task will wait
    252          *                            forever at the specified mailbox or, until a message arrives.
    253          *
    254          *              perr          is a pointer to where an error message will be deposited.  Possible error
    255          *                            messages are:
    256          *
    257          *                            OS_ERR_NONE         The call was successful and your task received a
    258          *                                                message.
    259          *                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'.
    260          *                            OS_ERR_PEND_ABORT   The wait on the mailbox was aborted.
    261          *                            OS_ERR_EVENT_TYPE   Invalid event type
    262          *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
    263          *                                                would lead to a suspension.
    264          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
    265          *                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
    266          *
    267          * Returns    : != (void *)0  is a pointer to the message received
    268          *              == (void *)0  if no message was received or,
    269          *                            if 'pevent' is a NULL pointer or,
    270          *                            if you didn't pass the proper pointer to the event control block.
    271          *********************************************************************************************************
    272          */
    273          /*$PAGE*/

   \                                 In section .text, align 2, keep-with-next
    274          void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
    275          {
   \                     OSMboxPend: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4688             MOV      R8,R1
    276              void      *pmsg;
    277          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    278              OS_CPU_SR  cpu_sr = 0;
    279          #endif
    280          
    281          
    282          
    283          #if OS_ARG_CHK_EN > 0
    284              if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    285                  return ((void *)0);
    286              }
    287              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    288                  *perr = OS_ERR_PEVENT_NULL;
    289                  return ((void *)0);
    290              }
    291          #endif
    292              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   \        0x8   0x7828             LDRB     R0,[R5, #+0]
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0x4616             MOV      R6,R2
   \        0xE   0xBF18             IT       NE 
   \       0x10   0x2101             MOVNE    R1,#+1
    293                  *perr = OS_ERR_EVENT_TYPE;
   \       0x12   0xD108             BNE.N    ??OSMboxPend_0
    294                  return ((void *)0);
    295              }
    296              if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   \       0x14   0x....             LDR.N    R2,??DataTable3
   \       0x16   0x7810             LDRB     R0,[R2, #+0]
   \       0x18   0xB108             CBZ.N    R0,??OSMboxPend_1
    297                  *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   \       0x1A   0x2102             MOVS     R1,#+2
   \       0x1C   0xE003             B.N      ??OSMboxPend_0
    298                  return ((void *)0);
    299              }
    300              if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   \                     ??OSMboxPend_1: (+1)
   \       0x1E   0x....             LDR.N    R2,??DataTable3_2
   \       0x20   0x7810             LDRB     R0,[R2, #+0]
   \       0x22   0xB118             CBZ.N    R0,??OSMboxPend_2
    301                  *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   \       0x24   0x210D             MOVS     R1,#+13
   \                     ??OSMboxPend_0: (+1)
   \       0x26   0x7031             STRB     R1,[R6, #+0]
    302                  return ((void *)0);
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xE049             B.N      ??OSMboxPend_3
    303              }
    304              OS_ENTER_CRITICAL();
   \                     ??OSMboxPend_2: (+1)
   \       0x2C   0x....'....        BL       OS_CPU_SR_Save
    305              pmsg = pevent->OSEventPtr;
   \       0x30   0x686C             LDR      R4,[R5, #+4]
   \       0x32   0x4681             MOV      R9,R0
    306              if (pmsg != (void *)0) {                          /* See if there is already a message             */
   \       0x34   0xB13C             CBZ.N    R4,??OSMboxPend_4
    307                  pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x6068             STR      R0,[R5, #+4]
    308                  OS_EXIT_CRITICAL();
   \       0x3A   0x4648             MOV      R0,R9
   \       0x3C   0x....'....        BL       OS_CPU_SR_Restore
    309                  *perr = OS_ERR_NONE;
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0x7030             STRB     R0,[R6, #+0]
    310                  return (pmsg);                                /* Return the message received (or NULL)         */
   \       0x44   0xE03B             B.N      ??CrossCallReturnLabel_8
    311              }
    312              OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   \                     ??OSMboxPend_4: (+1)
   \       0x46   0x....             LDR.N    R7,??DataTable3_3
   \       0x48   0x6838             LDR      R0,[R7, #+0]
   \       0x4A   0xF890 0x1030      LDRB     R1,[R0, #+48]
   \       0x4E   0xF041 0x0102      ORR      R1,R1,#0x2
   \       0x52   0xF880 0x1030      STRB     R1,[R0, #+48]
    313              OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x6839             LDR      R1,[R7, #+0]
   \       0x5A   0xF881 0x0031      STRB     R0,[R1, #+49]
    314              OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
    315              OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x683A             LDR      R2,[R7, #+0]
   \       0x62   0xF8A2 0x802E      STRH     R8,[R2, #+46]
   \       0x66   0x....'....        BL       OS_EventTaskWait
    316              OS_EXIT_CRITICAL();
   \       0x6A   0x4648             MOV      R0,R9
   \       0x6C   0x....'....        BL       OS_CPU_SR_Restore
    317              OS_Sched();                                       /* Find next highest priority task ready to run  */
   \       0x70   0x....'....        BL       OS_Sched
    318              OS_ENTER_CRITICAL();
   \       0x74   0x....'....        BL       OS_CPU_SR_Save
   \       0x78   0x4680             MOV      R8,R0
    319              switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   \       0x7A   0x6838             LDR      R0,[R7, #+0]
   \       0x7C   0xF100 0x0124      ADD      R1,R0,#+36
   \       0x80   0x7B4A             LDRB     R2,[R1, #+13]
   \       0x82   0xB112             CBZ.N    R2,??OSMboxPend_5
   \       0x84   0x2A02             CMP      R2,#+2
   \       0x86   0xD003             BEQ.N    ??OSMboxPend_6
   \       0x88   0xE005             B.N      ??OSMboxPend_7
    320                  case OS_STAT_PEND_OK:
    321                       pmsg =  OSTCBCur->OSTCBMsg;
   \                     ??OSMboxPend_5: (+1)
   \       0x8A   0x680C             LDR      R4,[R1, #+0]
    322                      *perr =  OS_ERR_NONE;
   \       0x8C   0x2000             MOVS     R0,#+0
   \       0x8E   0xE006             B.N      ??OSMboxPend_8
    323                       break;
    324          
    325                  case OS_STAT_PEND_ABORT:
    326                       pmsg = (void *)0;
    327                      *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   \                     ??OSMboxPend_6: (+1)
   \       0x90   0x210E             MOVS     R1,#+14
   \       0x92   0x7031             STRB     R1,[R6, #+0]
    328                       break;
   \       0x94   0xE004             B.N      ??OSMboxPend_9
    329          
    330                  case OS_STAT_PEND_TO:
    331                  default:
    332                       OS_EventTaskRemove(OSTCBCur, pevent);
   \                     ??OSMboxPend_7: (+1)
   \       0x96   0x4629             MOV      R1,R5
   \       0x98   0x....'....        BL       OS_EventTaskRemove
    333                       pmsg = (void *)0;
    334                      *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   \       0x9C   0x200A             MOVS     R0,#+10
   \                     ??OSMboxPend_8: (+1)
   \       0x9E   0x7030             STRB     R0,[R6, #+0]
    335                       break;
    336              }
    337              OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   \                     ??OSMboxPend_9: (+1)
   \       0xA0   0x683A             LDR      R2,[R7, #+0]
   \       0xA2   0x2100             MOVS     R1,#+0
   \       0xA4   0xF882 0x1030      STRB     R1,[R2, #+48]
    338              OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   \       0xA8   0x2000             MOVS     R0,#+0
   \       0xAA   0x6839             LDR      R1,[R7, #+0]
   \       0xAC   0xF881 0x0031      STRB     R0,[R1, #+49]
    339              OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   \       0xB0   0x2200             MOVS     R2,#+0
   \       0xB2   0x6838             LDR      R0,[R7, #+0]
   \       0xB4   0x61C2             STR      R2,[R0, #+28]
    340          #if (OS_EVENT_MULTI_EN > 0)
    341              OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   \       0xB6   0x6202             STR      R2,[R0, #+32]
    342          #endif
    343              OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   \       0xB8   0x6242             STR      R2,[R0, #+36]
    344              OS_EXIT_CRITICAL();
   \       0xBA   0x....'....        BL       ?Subroutine2
    345              return (pmsg);                                    /* Return received message                       */
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0xBE   0x4620             MOV      R0,R4
   \                     ??OSMboxPend_3: (+1)
   \       0xC0   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    346          }
    347          /*$PAGE*/
    348          /*
    349          *********************************************************************************************************
    350          *                                      ABORT WAITING ON A MESSAGE MAILBOX
    351          *
    352          * Description: This function aborts & readies any tasks currently waiting on a mailbox.  This function 
    353          *              should be used to fault-abort the wait on the mailbox, rather than to normally signal
    354          *              the mailbox via OSMboxPost() or OSMboxPostOpt().
    355          *
    356          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox.
    357          *
    358          *              opt           determines the type of ABORT performed:
    359          *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
    360          *                                                     mailbox
    361          *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
    362          *                                                     mailbox
    363          *
    364          *              perr          is a pointer to where an error message will be deposited.  Possible error
    365          *                            messages are:
    366          *
    367          *                            OS_ERR_NONE         No tasks were     waiting on the mailbox.
    368          *                            OS_ERR_PEND_ABORT   At least one task waiting on the mailbox was readied
    369          *                                                and informed of the aborted wait; check return value 
    370          *                                                for the number of tasks whose wait on the mailbox 
    371          *                                                was aborted.
    372          *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a mailbox.
    373          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
    374          *
    375          * Returns    : == 0          if no tasks were waiting on the mailbox, or upon error.
    376          *              >  0          if one or more tasks waiting on the mailbox are now readied and informed.
    377          *********************************************************************************************************
    378          */
    379          
    380          #if OS_MBOX_PEND_ABORT_EN > 0

   \                                 In section .text, align 2, keep-with-next
    381          INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
    382          {
   \                     OSMboxPendAbort: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
    383              INT8U      nbr_tasks;
    384          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    385              OS_CPU_SR  cpu_sr = 0;
    386          #endif
    387          
    388          
    389          
    390          #if OS_ARG_CHK_EN > 0
    391              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    392                  return (0);
    393              }
    394              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    395                  *perr = OS_ERR_PEVENT_NULL;
    396                  return (0);
    397              }
    398          #endif
    399              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   \        0x8   0x7828             LDRB     R0,[R5, #+0]
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0x4614             MOV      R4,R2
   \        0xE   0xD003             BEQ.N    ??OSMboxPendAbort_0
    400                  *perr = OS_ERR_EVENT_TYPE;
   \       0x10   0x2101             MOVS     R1,#+1
   \       0x12   0x7021             STRB     R1,[R4, #+0]
    401                  return (0);
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xE01D             B.N      ??OSMboxPendAbort_1
    402              }
    403              OS_ENTER_CRITICAL();
   \                     ??OSMboxPendAbort_0: (+1)
   \       0x18   0x....'....        BL       OS_CPU_SR_Save
   \       0x1C   0x4680             MOV      R8,R0
    404              if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   \       0x1E   0x7AA8             LDRB     R0,[R5, #+10]
   \       0x20   0xB1A0             CBZ.N    R0,??OSMboxPendAbort_2
    405                  nbr_tasks = 0;
   \       0x22   0x2700             MOVS     R7,#+0
    406                  switch (opt) {
   \       0x24   0x2E01             CMP      R6,#+1
   \       0x26   0xD106             BNE.N    ??OSMboxPendAbort_3
    407                      case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
    408                           while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
    409                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   \                     ??OSMboxPendAbort_4: (+1)
   \       0x28   0x....'....        BL       ?Subroutine0
    410                               nbr_tasks++;
    411                           }
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x2C   0x7AA8             LDRB     R0,[R5, #+10]
   \       0x2E   0x1C7F             ADDS     R7,R7,#+1
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD1F9             BNE.N    ??OSMboxPendAbort_4
   \       0x34   0xE002             B.N      ??OSMboxPendAbort_5
    412                           break;
    413                       
    414                      case OS_PEND_OPT_NONE:
    415                      default:                                       /* No,  ready HPT       waiting on mailbox  */
    416                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   \                     ??OSMboxPendAbort_3: (+1)
   \       0x36   0x....'....        BL       ?Subroutine0
    417                           nbr_tasks++;
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x3A   0x2701             MOVS     R7,#+1
    418                           break;
    419                  }
    420                  OS_EXIT_CRITICAL();
   \                     ??OSMboxPendAbort_5: (+1)
   \       0x3C   0x....'....        BL       ?Subroutine2
    421                  OS_Sched();                                        /* Find HPT ready to run                    */
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x40   0x....'....        BL       OS_Sched
    422                  *perr = OS_ERR_PEND_ABORT;
   \       0x44   0x200E             MOVS     R0,#+14
   \       0x46   0x7020             STRB     R0,[R4, #+0]
    423                  return (nbr_tasks);
   \       0x48   0xB2F8             UXTB     R0,R7
   \       0x4A   0xE003             B.N      ??OSMboxPendAbort_1
    424              }
    425              OS_EXIT_CRITICAL();
   \                     ??OSMboxPendAbort_2: (+1)
   \       0x4C   0x....'....        BL       ?Subroutine2
    426              *perr = OS_ERR_NONE;
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0x7020             STRB     R0,[R4, #+0]
    427              return (0);                                            /* No tasks waiting on mailbox              */
   \                     ??OSMboxPendAbort_1: (+1)
   \       0x54   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    428          }
    429          #endif
    430          
    431          /*$PAGE*/
    432          /*
    433          *********************************************************************************************************
    434          *                                       POST MESSAGE TO A MAILBOX
    435          *
    436          * Description: This function sends a message to a mailbox
    437          *
    438          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    439          *
    440          *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
    441          *
    442          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    443          *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
    444          *                                   message at a time and thus, the message MUST be consumed before you
    445          *                                   are allowed to send another one.
    446          *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
    447          *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
    448          *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
    449          *
    450          * Note(s)    : 1) HPT means Highest Priority Task
    451          *********************************************************************************************************
    452          */
    453          
    454          #if OS_MBOX_POST_EN > 0

   \                                 In section .text, align 2, keep-with-next
    455          INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
    456          {
   \                     OSMboxPost: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x....'....        BL       ?Subroutine1
    457          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    458              OS_CPU_SR  cpu_sr = 0;
    459          #endif
    460          
    461          
    462          
    463          #if OS_ARG_CHK_EN > 0
    464              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    465                  return (OS_ERR_PEVENT_NULL);
    466              }
    467              if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    468                  return (OS_ERR_POST_NULL_PTR);
    469              }
    470          #endif
    471              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   \                     ??CrossCallReturnLabel_3: (+1)
   \        0x6   0xD001             BEQ.N    ??OSMboxPost_0
    472                  return (OS_ERR_EVENT_TYPE);
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xBD70             POP      {R4-R6,PC}
    473              }
    474              OS_ENTER_CRITICAL();
   \                     ??OSMboxPost_0: (+1)
   \        0xC   0x....'....        BL       OS_CPU_SR_Save
   \       0x10   0x4606             MOV      R6,R0
    475              if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   \       0x12   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x14   0xB138             CBZ.N    R0,??OSMboxPost_1
    476                                                                /* Ready HPT waiting on event                    */
    477                  (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   \       0x16   0x....'....        BL       ?Subroutine3
    478                  OS_EXIT_CRITICAL();
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0x1A   0x4630             MOV      R0,R6
   \       0x1C   0x....'....        BL       OS_CPU_SR_Restore
    479                  OS_Sched();                                   /* Find highest priority task ready to run       */
   \       0x20   0x....'....        BL       OS_Sched
    480                  return (OS_ERR_NONE);
   \       0x24   0xE00A             B.N      ??OSMboxPost_2
    481              }
    482              if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   \                     ??OSMboxPost_1: (+1)
   \       0x26   0x6860             LDR      R0,[R4, #+4]
   \       0x28   0xB120             CBZ.N    R0,??OSMboxPost_3
    483                  OS_EXIT_CRITICAL();
   \       0x2A   0x4630             MOV      R0,R6
   \       0x2C   0x....'....        BL       OS_CPU_SR_Restore
    484                  return (OS_ERR_MBOX_FULL);
   \       0x30   0x2014             MOVS     R0,#+20
   \       0x32   0xBD70             POP      {R4-R6,PC}
    485              }
    486              pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   \                     ??OSMboxPost_3: (+1)
   \       0x34   0x6065             STR      R5,[R4, #+4]
    487              OS_EXIT_CRITICAL();
   \       0x36   0x4630             MOV      R0,R6
   \       0x38   0x....'....        BL       OS_CPU_SR_Restore
    488              return (OS_ERR_NONE);
   \                     ??OSMboxPost_2: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xBD70             POP      {R4-R6,PC}       ;; return
    489          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x2300             MOVS     R3,#+0
   \        0x2   0x2202             MOVS     R2,#+2
   \        0x4   0x4629             MOV      R1,R5
   \        0x6   0x4620             MOV      R0,R4
   \        0x8   0x....'....        B.W      OS_EventTaskRdy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x4604             MOV      R4,R0
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x7820             LDRB     R0,[R4, #+0]
   \        0x6   0x2801             CMP      R0,#+1
   \        0x8   0x4770             BX       LR
    490          #endif
    491          
    492          /*$PAGE*/
    493          /*
    494          *********************************************************************************************************
    495          *                                       POST MESSAGE TO A MAILBOX
    496          *
    497          * Description: This function sends a message to a mailbox
    498          *
    499          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    500          *
    501          *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
    502          *
    503          *              opt           determines the type of POST performed:
    504          *                            OS_POST_OPT_NONE         POST to a single waiting task
    505          *                                                     (Identical to OSMboxPost())
    506          *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the mailbox
    507          *
    508          *                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
    509          *
    510          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    511          *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
    512          *                                   message at a time and thus, the message MUST be consumed before you
    513          *                                   are allowed to send another one.
    514          *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
    515          *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
    516          *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
    517          *
    518          * Note(s)    : 1) HPT means Highest Priority Task
    519          *
    520          * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
    521          *              interrupt disable time is proportional to the number of tasks waiting on the mailbox.
    522          *********************************************************************************************************
    523          */
    524          
    525          #if OS_MBOX_POST_OPT_EN > 0

   \                                 In section .text, align 2, keep-with-next
    526          INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
    527          {
   \                     OSMboxPostOpt: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x....'....        BL       ?Subroutine1
    528          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    529              OS_CPU_SR  cpu_sr = 0;
    530          #endif
    531          
    532          
    533          
    534          #if OS_ARG_CHK_EN > 0
    535              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    536                  return (OS_ERR_PEVENT_NULL);
    537              }
    538              if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    539                  return (OS_ERR_POST_NULL_PTR);
    540              }
    541          #endif
    542              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   \                     ??CrossCallReturnLabel_4: (+1)
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0xD001             BEQ.N    ??OSMboxPostOpt_0
    543                  return (OS_ERR_EVENT_TYPE);
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xBDF2             POP      {R1,R4-R7,PC}
    544              }
    545              OS_ENTER_CRITICAL();
   \                     ??OSMboxPostOpt_0: (+1)
   \        0xE   0x....'....        BL       OS_CPU_SR_Save
   \       0x12   0x4607             MOV      R7,R0
    546              if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   \       0x14   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x16   0xB188             CBZ.N    R0,??OSMboxPostOpt_1
    547                  if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   \       0x18   0x07F0             LSLS     R0,R6,#+31
   \       0x1A   0xD505             BPL.N    ??OSMboxPostOpt_2
    548                      while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    549                          (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   \                     ??OSMboxPostOpt_3: (+1)
   \       0x1C   0x....'....        BL       ?Subroutine3
    550                      }
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x20   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD1FA             BNE.N    ??OSMboxPostOpt_3
   \       0x26   0xE001             B.N      ??CrossCallReturnLabel_10
    551                  } else {                                      /* No,  Post to HPT waiting on mbox              */
    552                      (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   \                     ??OSMboxPostOpt_2: (+1)
   \       0x28   0x....'....        BL       ?Subroutine3
    553                  }
    554                  OS_EXIT_CRITICAL();
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0x2C   0x4638             MOV      R0,R7
   \       0x2E   0x....'....        BL       OS_CPU_SR_Restore
    555                  if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   \       0x32   0x0770             LSLS     R0,R6,#+29
   \       0x34   0xD40D             BMI.N    ??OSMboxPostOpt_4
    556                      OS_Sched();                               /* Find HPT ready to run                         */
   \       0x36   0x....'....        BL       OS_Sched
    557                  }
    558                  return (OS_ERR_NONE);
   \       0x3A   0xE00A             B.N      ??OSMboxPostOpt_4
    559              }
    560              if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   \                     ??OSMboxPostOpt_1: (+1)
   \       0x3C   0x6860             LDR      R0,[R4, #+4]
   \       0x3E   0xB120             CBZ.N    R0,??OSMboxPostOpt_5
    561                  OS_EXIT_CRITICAL();
   \       0x40   0x4638             MOV      R0,R7
   \       0x42   0x....'....        BL       OS_CPU_SR_Restore
    562                  return (OS_ERR_MBOX_FULL);
   \       0x46   0x2014             MOVS     R0,#+20
   \       0x48   0xBDF2             POP      {R1,R4-R7,PC}
    563              }
    564              pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   \                     ??OSMboxPostOpt_5: (+1)
   \       0x4A   0x6065             STR      R5,[R4, #+4]
    565              OS_EXIT_CRITICAL();
   \       0x4C   0x4638             MOV      R0,R7
   \       0x4E   0x....'....        BL       OS_CPU_SR_Restore
    566              return (OS_ERR_NONE);
   \                     ??OSMboxPostOpt_4: (+1)
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    567          }
    568          #endif
    569          
    570          /*$PAGE*/
    571          /*
    572          *********************************************************************************************************
    573          *                                        QUERY A MESSAGE MAILBOX
    574          *
    575          * Description: This function obtains information about a message mailbox.
    576          *
    577          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    578          *
    579          *              p_mbox_data   is a pointer to a structure that will contain information about the message
    580          *                            mailbox.
    581          *
    582          * Returns    : OS_ERR_NONE         The call was successful and the message was sent
    583          *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non mailbox.
    584          *              OS_ERR_PEVENT_NULL  If 'pevent'      is a NULL pointer
    585          *              OS_ERR_PDATA_NULL   If 'p_mbox_data' is a NULL pointer
    586          *********************************************************************************************************
    587          */
    588          
    589          #if OS_MBOX_QUERY_EN > 0

   \                                 In section .text, align 2, keep-with-next
    590          INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
    591          {
   \                     OSMboxQuery: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x....'....        BL       ?Subroutine1
    592              INT8U      i;
    593          #if OS_LOWEST_PRIO <= 63
    594              INT8U     *psrc;
    595              INT8U     *pdest;
    596          #else
    597              INT16U    *psrc;
    598              INT16U    *pdest;
    599          #endif
    600          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    601              OS_CPU_SR  cpu_sr = 0;
    602          #endif
    603          
    604          
    605          
    606          #if OS_ARG_CHK_EN > 0
    607              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    608                  return (OS_ERR_PEVENT_NULL);
    609              }
    610              if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
    611                  return (OS_ERR_PDATA_NULL);
    612              }
    613          #endif
    614              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   \                     ??CrossCallReturnLabel_5: (+1)
   \        0x6   0xD001             BEQ.N    ??OSMboxQuery_0
    615                  return (OS_ERR_EVENT_TYPE);
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xBD70             POP      {R4-R6,PC}
    616              }
    617              OS_ENTER_CRITICAL();
   \                     ??OSMboxQuery_0: (+1)
   \        0xC   0x....'....        BL       OS_CPU_SR_Save
   \       0x10   0x4601             MOV      R1,R0
    618              p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   \       0x12   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x14   0x7228             STRB     R0,[R5, #+8]
    619              psrc                    = &pevent->OSEventTbl[0];
   \       0x16   0xF104 0x020B      ADD      R2,R4,#+11
    620              pdest                   = &p_mbox_data->OSEventTbl[0];
   \       0x1A   0x1D2B             ADDS     R3,R5,#+4
    621              for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   \       0x1C   0x2004             MOVS     R0,#+4
    622                  *pdest++ = *psrc++;
   \                     ??OSMboxQuery_1: (+1)
   \       0x1E   0xF812 0x6B01      LDRB     R6,[R2], #+1
   \       0x22   0xF803 0x6B01      STRB     R6,[R3], #+1
    623              }
   \       0x26   0x1E40             SUBS     R0,R0,#+1
   \       0x28   0xD1F9             BNE.N    ??OSMboxQuery_1
    624              p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   \       0x2A   0x6860             LDR      R0,[R4, #+4]
   \       0x2C   0x6028             STR      R0,[R5, #+0]
    625              OS_EXIT_CRITICAL();
   \       0x2E   0x4608             MOV      R0,R1
   \       0x30   0x....'....        BL       OS_CPU_SR_Restore
    626              return (OS_ERR_NONE);
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xBD70             POP      {R4-R6,PC}       ;; return
    627          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     OSEventFreeList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     OSLockNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     OSTCBCur
    628          #endif                                                     /* OS_MBOX_QUERY_EN                         */
    629          #endif                                                     /* OS_MBOX_EN                               */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   OSMboxAccept
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
      16   OSMboxCreate
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
        16   -> OS_EventWaitListInit
      32   OSMboxDel
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
        32   -> OS_EventTaskRdy
        32   -> OS_Sched
      32   OSMboxPend
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
        32   -> OS_EventTaskRemove
        32   -> OS_EventTaskWait
        32   -> OS_Sched
      24   OSMboxPendAbort
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      16   OSMboxPost
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
        16   -> OS_EventTaskRdy
        16   -> OS_Sched
      24   OSMboxPostOpt
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      16   OSMboxQuery
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      12  ?Subroutine0
      10  ?Subroutine1
       6  ?Subroutine2
      12  ?Subroutine3
      32  OSMboxAccept
      62  OSMboxCreate
     158  OSMboxDel
     196  OSMboxPend
      88  OSMboxPendAbort
      64  OSMboxPost
      86  OSMboxPostOpt
      56  OSMboxQuery

 
 798 bytes in section .text
 
 798 bytes of CODE memory

Errors: none
Warnings: none
